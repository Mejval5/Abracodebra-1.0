This document contains extracted Unity C# scripts from my dualgrid 3rd party tilemap package plugin.

================================================================================
UNITY PROJECT SCRIPT EXPORT - 2025-04-10 23:44:12
PART 4 OF 4
================================================================================

--------------------------------------------------------------------------------
Assets
├── Animation
│   ├── MiniVillagerMan_Animator.controller
│   └── MiniVillagerMan_AnimatorBackup.controller
├── DefaultVolumeProfile.asset
├── Editor
│   ├── NodeDefinitionAutoAdder.cs
│   ├── NodeDefinitionCreator.cs
│   ├── NodeDefinitionEditor.cs
│   ├── NodeDefinitionLibraryEditor.cs
│   ├── NodeDefinitionPostprocessor.cs
│   └── NodeEffectDrawer.cs
├── HueFolders
│   ├── Editor
│   │   ├── HueFolders.Editor.asmdef
│   │   ├── HueFoldersBrowser.cs
│   │   └── SettingsProvider.cs
│   ├── Readme.pdf
│   └── package.json
├── InputSystem_Actions.inputactions
├── Materials
│   ├── BezierCurveAA_Material.mat
│   └── Firefly_Glow_Material.mat
├── Post Processing
├── Prefabs
│   ├── Ecosystem
│   │   ├── Animals
│   │   │   ├── Animal_Bird.prefab
│   │   │   ├── Animal_Bunny.prefab
│   │   │   ├── Animal_Fox.prefab
│   │   │   └── FireflyPrefab.prefab
│   │   ├── Plants
│   │   │   ├── PixelBerry.prefab
│   │   │   ├── PixelFlower.prefab
│   │   │   ├── PixelLeaf.prefab
│   │   │   ├── PixelSeed.prefab
│   │   │   ├── PixelStem.prefab
│   │   │   └── PlantPrefab.prefab
│   │   ├── Props
│   │   │   ├── Poop_Big.prefab
│   │   │   ├── Poop_Medium_01.prefab
│   │   │   └── Poop_Medium_02.prefab
│   │   └── UI
│   │       ├── EmptySlot16.prefab
│   │       ├── EmptySlot32.prefab
│   │       ├── Indicator_Opportunity.prefab
│   │       ├── Indicator_Resource.prefab
│   │       ├── Indicator_Threat.prefab
│   │       ├── NodeCellEmpty16.prefab
│   │       ├── NodePics
│   │       │   ├── Seed_01.prefab
│   │       │   └── Seed_02.prefab
│   │       ├── NodeView.prefab
│   │       ├── ThoughtBubble.prefab
│   │       ├── Visualizer_Circle_Prefab.prefab
│   │       └── Visualizer_Line_Prefab.prefab
│   ├── General
│   │   ├── GardenerPrefab.prefab
│   │   └── Projectile_Basic_Pixel.prefab
│   └── Tiles
│       ├── Common
│       │   ├── PLains_0_Corner_LT.asset
│       │   ├── PLains_10.asset
│       │   ├── PLains_100.asset
│       │   ├── PLains_101.asset
│       │   ├── PLains_102.asset
│       │   ├── PLains_11.asset
│       │   ├── PLains_12.asset
│       │   ├── PLains_13.asset
│       │   ├── PLains_14.asset
│       │   ├── PLains_15.asset
│       │   ├── PLains_16.asset
│       │   ├── PLains_17.asset
│       │   ├── PLains_18.asset
│       │   ├── PLains_19.asset
│       │   ├── PLains_1_T.asset
│       │   ├── PLains_20.asset
│       │   ├── PLains_21.asset
│       │   ├── PLains_22.asset
│       │   ├── PLains_23.asset
│       │   ├── PLains_24.asset
│       │   ├── PLains_25.asset
│       │   ├── PLains_26.asset
│       │   ├── PLains_27.asset
│       │   ├── PLains_28.asset
│       │   ├── PLains_29.asset
│       │   ├── PLains_2_Corner_RT.asset
│       │   ├── PLains_30.asset
│       │   ├── PLains_31.asset
│       │   ├── PLains_32.asset
│       │   ├── PLains_33.asset
│       │   ├── PLains_34.asset
│       │   ├── PLains_35.asset
│       │   ├── PLains_36.asset
│       │   ├── PLains_37.asset
│       │   ├── PLains_38.asset
│       │   ├── PLains_39.asset
│       │   ├── PLains_3_Single_B.asset
│       │   ├── PLains_40.asset
│       │   ├── PLains_41.asset
│       │   ├── PLains_42.asset
│       │   ├── PLains_43.asset
│       │   ├── PLains_44.asset
│       │   ├── PLains_45.asset
│       │   ├── PLains_46.asset
│       │   ├── PLains_47.asset
│       │   ├── PLains_48.asset
│       │   ├── PLains_49.asset
│       │   ├── PLains_4_Single_B.TR.asset
│       │   ├── PLains_5.asset
│       │   ├── PLains_50.asset
│       │   ├── PLains_51.asset
│       │   ├── PLains_52_Grass_Center.asset
│       │   ├── PLains_53_Grass_Center.asset
│       │   ├── PLains_54_Grass_Center.asset
│       │   ├── PLains_55.asset
│       │   ├── PLains_56_Grass_Center.asset
│       │   ├── PLains_57.asset
│       │   ├── PLains_58.asset
│       │   ├── PLains_59.asset
│       │   ├── PLains_6.asset
│       │   ├── PLains_60.asset
│       │   ├── PLains_61_Grass_Center.asset
│       │   ├── PLains_62_Grass_Center.asset
│       │   ├── PLains_63.asset
│       │   ├── PLains_64_Grass_Center.asset
│       │   ├── PLains_65.asset
│       │   ├── PLains_66.asset
│       │   ├── PLains_67.asset
│       │   ├── PLains_68.asset
│       │   ├── PLains_69.asset
│       │   ├── PLains_7.asset
│       │   ├── PLains_70.asset
│       │   ├── PLains_71.asset
│       │   ├── PLains_72.asset
│       │   ├── PLains_73.asset
│       │   ├── PLains_74.asset
│       │   ├── PLains_75.asset
│       │   ├── PLains_76.asset
│       │   ├── PLains_77.asset
│       │   ├── PLains_78.asset
│       │   ├── PLains_79.asset
│       │   ├── PLains_8.asset
│       │   ├── PLains_80.asset
│       │   ├── PLains_81.asset
│       │   ├── PLains_82.asset
│       │   ├── PLains_83.asset
│       │   ├── PLains_84.asset
│       │   ├── PLains_85.asset
│       │   ├── PLains_86.asset
│       │   ├── PLains_87.asset
│       │   ├── PLains_88.asset
│       │   ├── PLains_89.asset
│       │   ├── PLains_9.asset
│       │   ├── PLains_90.asset
│       │   ├── PLains_91.asset
│       │   ├── PLains_92.asset
│       │   ├── PLains_93.asset
│       │   ├── PLains_94.asset
│       │   ├── PLains_95.asset
│       │   ├── PLains_96.asset
│       │   ├── PLains_97.asset
│       │   ├── PLains_98.asset
│       │   └── PLains_99.asset
│       ├── Palettes
│       │   └── PaletteDual_Ground.prefab
│       └── Rule Tiles
│           ├── DualGridRuleTile_Dirt.asset
│           └── DualGridRuleTile_Grass.asset
├── Scenes
│   ├── MainScene.unity
│   ├── SampleScene
│   │   └── GlobalPostProcessVolume Profile.asset
│   └── SampleScene.unity
├── Scriptable Objects
│   ├── Animals
│   │   ├── AnimalLibrary.asset
│   │   └── Animal_000_Bunny.asset
│   ├── Animals Diet
│   │   └── Diet_000_Bunny.asset
│   ├── Food
│   │   ├── FoodType_000_Berry.asset
│   │   └── FoodType_000_Leaf.asset
│   ├── Life Thoughts
│   │   └── AnimalThoughtLibrary.asset
│   ├── Nodes Plant
│   │   ├── NodeDefinitionLibrary.asset
│   │   ├── Node_000_Seed.asset
│   │   ├── Node_001_Berry.asset
│   │   └── Node_002_FireflyPheromone.asset
│   ├── Scents
│   │   ├── ScentLibrary.asset
│   │   └── Scent_000_FireflyPheromone.asset
│   ├── Tiles
│   │   ├── TileInteractionLibrary.asset
│   │   ├── TileTypeDef_000_Grass.asset
│   │   ├── TileTypeDef_001_Dirt.asset
│   │   └── TileTypeDef_002_DirtWet.asset
│   └── Tools
│       ├── ToolDef_000_Hoe.asset
│       └── ToolDef_001_WateringCan.asset
├── Scripts
│   ├── Battle
│   │   ├── Plant
│   │   │   ├── PlantCell.cs
│   │   │   ├── PlantGrowth.cs
│   │   │   └── WeatherManager.cs
│   │   ├── SpellProjectile.cs
│   │   └── Status Effects
│   │       ├── BurningStatusEffect.cs
│   │       └── StatusEffect.cs
│   ├── Core
│   │   └── SortableEntity.cs
│   ├── Ecosystem
│   │   ├── Animals
│   │   │   ├── AnimalDefinition.cs
│   │   │   └── AnimalLibrary.cs
│   │   ├── Core
│   │   │   ├── AnimalController.cs
│   │   │   ├── AnimalSpawnData.cs
│   │   │   ├── AnimalThoughtLibrary.cs
│   │   │   ├── EcosystemManager.cs
│   │   │   ├── FaunaManager.cs
│   │   │   ├── FloraManager.cs
│   │   │   ├── PoopController.cs
│   │   │   ├── ScentSource.cs
│   │   │   ├── ThoughtBubbleController.cs
│   │   │   └── ThoughtTrigger.cs
│   │   ├── Effects
│   │   │   ├── FireflyController.cs
│   │   │   └── FireflyManager.cs
│   │   ├── Food
│   │   │   ├── AnimalDiet.cs
│   │   │   ├── FoodItem.cs
│   │   │   └── FoodType.cs
│   │   ├── Plants
│   │   └── Scents
│   │       ├── ScentDefinition.cs
│   │       └── ScentLibrary.cs
│   ├── Nodes
│   │   ├── Core
│   │   │   ├── NodeData.cs
│   │   │   ├── NodeDefinition.cs
│   │   │   ├── NodeDefinitionLibrary.cs
│   │   │   ├── NodeEffectData.cs
│   │   │   ├── NodeEffectType.cs
│   │   │   └── OutputNodeEffect.cs
│   │   ├── Runtime
│   │   │   ├── NodeExecutor.cs
│   │   │   └── NodeGraph.cs
│   │   └── UI
│   │       ├── ColorExtensions.cs
│   │       ├── DeselectOnClickOutside.cs
│   │       ├── NodeCell.cs
│   │       ├── NodeDraggable.cs
│   │       ├── NodeEditorGridController.cs
│   │       ├── NodeSelectable.cs
│   │       └── NodeView.cs
│   ├── Player
│   │   └── GardenerController.cs
│   ├── Tiles
│   │   ├── Data
│   │   │   ├── TileAction.cs
│   │   │   ├── TileInteractionLibrary.cs
│   │   │   ├── TileInteractionManager.cs
│   │   │   └── TileTypeDefinition.cs
│   │   └── Tools
│   │       └── ToolDefinition.cs
│   ├── UI
│   └── Visuals
│       ├── NightColorPostProcess.cs
│       └── RuntimeCircleDrawer.cs
├── Settings
│   ├── Lit2DSceneTemplate.scenetemplate
│   ├── Renderer2D.asset
│   ├── Scenes
│   │   └── URP2DSceneTemplate.unity
│   └── UniversalRP.asset
├── Shaders
│   ├── BezierCurveAA.shader
│   └── SpriteEmissiveUnlit.shader
├── TextureImporter.preset
└── UniversalRenderPipelineGlobalSettings.asset
--------------------------------------------------------------------------------

SCRIPT CONTENTS
================================================================================

SCRIPT CONTENTS
================================================================================

////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Extensions\ComponentExtensions.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine;

namespace skner.DualGrid.Extensions
{
    public static class ComponentExtensions
    {

        /// <summary>
        /// Returns the first component found in immediate children of <paramref name="parent"/>.
        /// </summary>
        /// <remarks>
        /// It will not return a component found in the <paramref name="parent"/>'s game object.
        /// </remarks>
        /// <typeparam name="T"></typeparam>
        /// <param name="parent"></param>
        /// <returns></returns>
        public static T GetComponentInImmediateChildren<T>(this Component parent) where T : Component
        {
            foreach (Transform child in parent.transform)
            {
                T component = child.GetComponent<T>();
                if (component != null && component.transform != parent.transform)
                {
                    return component;
                }
            }
            return null;
        }

        /// <summary>
        /// Returns the first component found in immediate parent of <paramref name="component"/>.
        /// </summary>
        /// <remarks>
        /// It will not return a component found in the <paramref name="component"/>'s game object.
        /// </remarks>
        /// <typeparam name="T"></typeparam>
        /// <param name="component"></param>
        /// <returns></returns>
        public static T GetComponentInImmediateParent<T>(this Component component) where T : Component
        {
            return component.transform?.parent?.GetComponent<T>();
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Extensions\GameObjectExtensions.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine;

namespace skner.DualGrid.Extensions
{
    public static class GameObjectExtensions
    {

        /// <summary>
        /// Returns the first component found in immediate parent of <paramref name="gameObject"/>.
        /// </summary>
        /// <remarks>
        /// It will not return a component found in the <paramref name="gameObject"/>'s game object.
        /// </remarks>
        /// <typeparam name="T"></typeparam>
        /// <param name="gameObject"></param>
        /// <returns></returns>
        public static T GetComponentInImmediateParent<T>(this GameObject gameObject) where T : Component
        {
            return gameObject.transform?.parent?.GetComponent<T>();
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Extensions\TilingRuleExtensions.cs
////////////////////////////////////////////////////////////////////////////////
﻿using skner.DualGrid.Utils;
using UnityEngine;
using static UnityEngine.RuleTile;

namespace skner.DualGrid.Extensions
{
    public static class TilingRuleExtensions
    {

        /// <summary>
        /// Calculates the relative neighbor offset from the <paramref name="dataTileOffset"/> and returns the correct index of the neighbor.
        /// </summary>
        /// <param name="rule"></param>
        /// <param name="dataTileOffset"></param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentException"></exception>
        public static int GetNeighborIndex(this TilingRule rule, Vector3Int dataTileOffset)
        {
            Vector3Int neighborOffsetPosition = DualGridUtils.ConvertDataTileOffsetToNeighborOffset(dataTileOffset);

            var neightborIndex = rule.m_NeighborPositions.IndexOf(neighborOffsetPosition);

            return neightborIndex;
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Properties\AssemblyInfo.cs
////////////////////////////////////////////////////////////////////////////////
﻿using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("skner.DualGrid.Editor")]





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Tiles\DualGridDataTile.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine;
using UnityEngine.Tilemaps;

namespace skner.DualGrid
{
    public class DualGridDataTile : Tile
    {

        private DualGridTilemapModule _dualGridTilemapModule;

        public override void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData)
        {
            SetDataTilemap(tilemap);

            base.GetTileData(position, tilemap, ref tileData);

            // Sets the tile data's GameObject based on the associated DualGridTilemapModule's setting
            if (_dualGridTilemapModule != null && _dualGridTilemapModule.GameObjectOrigin != GameObjectOrigin.DataTilemap)
            {
                tileData.gameObject = null;
            }
        }

        private void SetDataTilemap(ITilemap tilemap)
        {
            var originTilemap = tilemap.GetComponent<Tilemap>();
            _dualGridTilemapModule = originTilemap.GetComponent<DualGridTilemapModule>();
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Tiles\DualGridPreviewTile.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine.Tilemaps;

namespace skner.DualGrid
{
    public class DualGridPreviewTile : TileBase
    {

        public bool IsFilled { get; private set; }

        public static DualGridPreviewTile Filled => Create(isFilled: true);
        public static DualGridPreviewTile NotFilled => Create(isFilled: false);

        private static DualGridPreviewTile Create(bool isFilled)
        {
            var dualGridPreviewTile = CreateInstance<DualGridPreviewTile>();
            dualGridPreviewTile.name = $"{(isFilled ? "Filled" : "Empty")} Dual Grid Preview Tile";
            dualGridPreviewTile.IsFilled = isFilled;
            return dualGridPreviewTile;
        }
    }

}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Tiles\DualGridRuleTile.cs
////////////////////////////////////////////////////////////////////////////////
using skner.DualGrid.Extensions;
using skner.DualGrid.Utils;
using System;
using UnityEngine;
using UnityEngine.Tilemaps;
using static skner.DualGrid.DualGridRuleTile;

namespace skner.DualGrid
{
    /// <summary>
    /// The custom <see cref="RuleTile"/> used by the <see cref="DualGridTilemapModule"/> to generate tiles in the Render Tilemap.
    /// </summary>
    /// <remarks>
    /// Avoid using this tile in a palette, as any other data tile can be used.
    /// <para></para>
    /// This tile type will be used in all Render Tilemaps.
    /// </remarks>
    [Serializable]
    [CreateAssetMenu(fileName = "DualGridRuleTile", menuName = "Scriptable Objects/DualGridRuleTile")]
    public class DualGridRuleTile : RuleTile<DualGridNeighbor>
    {

        [SerializeField]
        [HideInInspector]
        private Texture2D _originalTexture;
        public Texture2D OriginalTexture { get => _originalTexture; internal set => _originalTexture = value; }

        private DualGridDataTile _dataTile;
        /// <summary>
        /// The Data Tile is a tile generated from this Dual Grid Rule Tile to populate the DataTilemap.
        /// </summary>
        public DualGridDataTile DataTile { get => _dataTile != null ? _dataTile : RefreshDataTile(); }

        private DualGridTilemapModule _dualGridTilemapModule;

        private Tilemap _dataTilemap;

        public class DualGridNeighbor
        {
            /// <summary>
            /// The Dual Grid Rule Tile will check if the contents of the data tile in that direction is filled.
            /// If not, the rule will fail.
            /// </summary>
            public const int Filled = 1;

            /// <summary>
            /// The Dual Grid Rule Tile will check if the contents of the data tile in that direction is not filled.
            /// If it is, the rule will fail.
            /// </summary>
            public const int NotFilled = 2;
        }

        /// <summary>
        /// Force sets the actual Data Tilemap before updating the tile, because Unity seems to move tiles between tilemaps sometimes.
        /// </summary>
        /// <param name="position"></param>
        /// <param name="tilemap"></param>
        /// <param name="tileData"></param>
        public override void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData)
        {
            SetDataTilemap(tilemap);

            var iden = Matrix4x4.identity;

            tileData.sprite = m_DefaultSprite;
            tileData.gameObject = m_DefaultGameObject;
            tileData.colliderType = m_DefaultColliderType;
            tileData.flags = TileFlags.LockTransform;
            tileData.transform = iden;

            bool gameObjectShouldBeInRenderTilemap = _dualGridTilemapModule == null || _dualGridTilemapModule.GameObjectOrigin == GameObjectOrigin.RenderTilemap;
            Matrix4x4 transform = iden;
            foreach (TilingRule rule in m_TilingRules)
            {
                if (RuleMatches(rule, position, tilemap, ref transform))
                {
                    switch (rule.m_Output)
                    {
                        case TilingRuleOutput.OutputSprite.Single:
                        case TilingRuleOutput.OutputSprite.Animation:
                            tileData.sprite = rule.m_Sprites[0];
                            break;
                        case TilingRuleOutput.OutputSprite.Random:
                            int index = Mathf.Clamp(Mathf.FloorToInt(GetPerlinValue(position, rule.m_PerlinScale, 100000f) * rule.m_Sprites.Length), 0, rule.m_Sprites.Length - 1);
                            tileData.sprite = rule.m_Sprites[index];
                            if (rule.m_RandomTransform != TilingRuleOutput.Transform.Fixed)
                                transform = ApplyRandomTransform(rule.m_RandomTransform, transform, rule.m_PerlinScale, position);
                            break;
                    }
                    tileData.transform = transform;
                    tileData.gameObject = gameObjectShouldBeInRenderTilemap ? rule.m_GameObject : null;
                    break;
                }
            }
        }

        /// <summary>
        /// Refreshes the <see cref="DataTile"/> with this <see cref="DualGridRuleTile"/>'s configuration.
        /// </summary>
        /// <returns>The refreshed data tile.</returns>
        public virtual DualGridDataTile RefreshDataTile()
        {
            if (_dataTile == null) _dataTile = ScriptableObject.CreateInstance<DualGridDataTile>();

            _dataTile.name = this.name;
            _dataTile.colliderType = this.m_DefaultColliderType;
            _dataTile.gameObject = this.m_DefaultGameObject;

            return _dataTile;
        }

        /// <inheritdoc/>
        public override bool RuleMatches(TilingRule ruleToValidate, Vector3Int renderTilePosition, ITilemap tilemap, ref Matrix4x4 transform)
        {
            // Skip custom rule validation in cases where this DualGridRuleTile is not within a valid tilemap
            if (GetDataTilemap(tilemap) == null) return false;

            Vector3Int[] dataTilemapPositions = DualGridUtils.GetDataTilePositions(renderTilePosition);

            foreach (Vector3Int dataTilePosition in dataTilemapPositions)
            {
                if (!DoesRuleMatchWithDataTile(ruleToValidate, dataTilePosition, renderTilePosition))
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Checks if the <paramref name="dataTilePosition"/> is filled in accordance with the defined <paramref name="rule"/>.
        /// </summary>
        /// <param name="rule"></param>
        /// <param name="dataTilePosition"></param>
        /// <param name="renderTilePosition"></param>
        /// <returns></returns>
        private bool DoesRuleMatchWithDataTile(TilingRule rule, Vector3Int dataTilePosition, Vector3Int renderTilePosition)
        {
            Vector3Int dataTileOffset = dataTilePosition - renderTilePosition;

            int neighborIndex = rule.GetNeighborIndex(dataTileOffset);
            if (neighborIndex == -1) return true; // If no neighbor is defined, it means it matches with anything.

            // Compiler condition ensures that EditorPreviewTiles are only considered when running inside the Unity Editor
#if UNITY_EDITOR
            var neighborDataTile = _dataTilemap.GetEditorPreviewTile(dataTilePosition);
            if (neighborDataTile == null) neighborDataTile = _dataTilemap.GetTile(dataTilePosition);
#else
            var neighborDataTile = _dataTilemap.GetTile(dataTilePosition);
#endif

            return RuleMatch(rule.m_Neighbors[neighborIndex], neighborDataTile);
        }

        /// <inheritdoc/>
        public override bool RuleMatch(int neighbor, TileBase other)
        {
            bool isEmptyPreviewTile = other is DualGridPreviewTile dualGridPreviewTile && dualGridPreviewTile.IsFilled == false;

            return neighbor switch
            {
                DualGridNeighbor.Filled => !isEmptyPreviewTile && other != null,
                DualGridNeighbor.NotFilled => isEmptyPreviewTile || other == null,
                _ => true,
            };
        }

        /// <summary>
        /// Getter for the data tilemap, which can attempt to set it from the <paramref name="tilemap"/> if the <see cref="_dataTilemap"/> field is <see langword="null"/>.
        /// <para></para>
        /// This is done because in key moments, the <see cref="StartUp"/> method has not yet been called, but the tile is being updated -> Unity messing this up and is not fixable externally.
        /// If the data tilemap would be null, the rule matching will not work properly.
        /// <para></para>
        /// See GitHub issue 5: https://github.com/skner-dev/DualGrid/issues/5.
        /// </summary>
        /// <param name="tilemap"></param>
        /// <returns></returns>
        private Tilemap GetDataTilemap(ITilemap tilemap)
        {
            if (_dualGridTilemapModule == null || _dualGridTilemapModule.DataTilemap == null)
            {
                SetDataTilemap(tilemap);
            }

            return _dataTilemap;
        }

        private void SetDataTilemap(ITilemap tilemap)
        {
            var originTilemap = tilemap.GetComponent<Tilemap>();

            _dualGridTilemapModule = originTilemap.GetComponentInParent<DualGridTilemapModule>();

            if (_dualGridTilemapModule != null)
            {
                _dataTilemap = _dualGridTilemapModule.DataTilemap;
            }
            else
            {
                // This situation can happen in two cases:
                // - When a DualGridRuleTile is used in a tile palette, which can be ignored
                // - When a DualGridRuleTile is used in a tilemap that does not have a DualGridTilemapModule, which is problematic
                // There is no definitive way to distinguish between these two scenarios, so a warning is thrown. (thanks Unity)

                //Debug.LogWarning($"DualGridRuleTile '{name}' detected outside of a {nameof(Tilemap)} that contains a {nameof(DualGridTilemapModule)}. " +
                //    $"If the tilemap is a tile palette, discard this warning, otherwise investigate it, as this tile won't work properly.", originTilemap);
            }
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Runtime\Utils\DualGridUtils.cs
////////////////////////////////////////////////////////////////////////////////
﻿using System.Collections.Generic;
using UnityEngine;

namespace skner.DualGrid.Utils
{
    public static class DualGridUtils
    {

        /// <summary>
        /// Gets the 4 render tile positions from a <paramref name="dataTilePosition"/>.
        /// </summary>
        /// <remarks>
        /// Assumes that the render tilemap offset is always (-0.5, -0.5).
        /// </remarks>
        /// <param name="dataTilePosition"></param>
        /// <returns></returns>
        public static Vector3Int[] GetRenderTilePositions(Vector3Int dataTilePosition)
        {
            return new Vector3Int[]
            {
                dataTilePosition + new Vector3Int(0, 0, 0),
                dataTilePosition + new Vector3Int(1, 0, 0),
                dataTilePosition + new Vector3Int(0, 1, 0),
                dataTilePosition + new Vector3Int(1, 1, 0)
            };
        }

        /// <summary>
        /// Gets the 4 data tile positions from a <paramref name="renderTilePosition"/>.
        /// </summary>
        /// <remarks>
        /// Assumes that the render tilemap offset is always (-0.5, -0.5).
        /// </remarks>
        /// <param name="renderTilePosition"></param>
        /// <returns></returns>
        public static Vector3Int[] GetDataTilePositions(Vector3Int renderTilePosition)
        {
            return new Vector3Int[]
            {
                renderTilePosition - new Vector3Int(0, 0, 0),
                renderTilePosition - new Vector3Int(1, 0, 0),
                renderTilePosition - new Vector3Int(0, 1, 0),
                renderTilePosition - new Vector3Int(1, 1, 0)
            };
        }

        /// <summary>
        /// Gets all positions in a square range around a specified position.
        /// </summary>
        /// <remarks>
        /// Works in two dimensions only. z axis is unchanged.
        /// </remarks>
        /// <param name="centralPosition"></param>
        /// <param name="size"></param>
        /// <param name="includeCenter"></param>
        /// <returns></returns>
        public static List<Vector3Int> GetSurroundingPositions(Vector3Int centralPosition, int size, bool includeCenter = false)
        {
            var positions = new List<Vector3Int>();

            for (int y = -size; y <= size; y++)
            {
                for (int x = -size; x <= size; x++)
                {
                    if (!includeCenter && x == 0 && y == 0)
                        continue;

                    positions.Add(new Vector3Int(centralPosition.x + x, centralPosition.y + y, centralPosition.z));
                }
            }

            return positions;
        }

        /// <summary>
        /// Converts a valid render tile offset, used to offset a DataTilePosition into a RenderTilePosition,
        /// into a valid neighbor offset, used by Unity's Tilemap to calculate neighbors and apply rule tiles.
        /// </summary>
        /// <remarks>
        /// This is only valid for render tile offsets, aka, positive offsets. 
        /// Refer to 
        /// </remarks>
        /// <param name="renderTileOffset"></param>
        /// <returns></returns>
        public static Vector3Int ConvertRenderTileOffsetToNeighborOffset(Vector3Int renderTileOffset)
        {
            return new Vector3Int(
                renderTileOffset.x == 0 ? -1 : renderTileOffset.x,
                renderTileOffset.y == 0 ? -1 : renderTileOffset.y,
                renderTileOffset.z
            );
        }

        /// <summary>
        /// Converts a valid data tile offset, used to offset a RenderTilePosition into a DataTilePosition,
        /// into a valid neighbor offset, used by Unity's Tilemap to calculate neighbors and apply rule tiles.
        /// </summary>
        /// <remarks>
        /// This is only valid for data tile offsets, aka, negative offsets. 
        /// Refer to 
        /// </remarks>
        /// <param name="dataTileOffset"></param>
        /// <returns></returns>
        public static Vector3Int ConvertDataTileOffsetToNeighborOffset(Vector3Int dataTileOffset)
        {
            return new Vector3Int(
                dataTileOffset.x == 0 ? 1 : dataTileOffset.x,
                dataTileOffset.y == 0 ? 1 : dataTileOffset.y,
                dataTileOffset.z
            );
        }

    }
}






--------------------------------------------------------------------------------
This is the final part (4 of 4).
--------------------------------------------------------------------------------