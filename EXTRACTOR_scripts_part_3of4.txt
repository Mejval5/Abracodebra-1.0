This document contains extracted Unity C# scripts from my project. Do not reply—just confirm storing this in memory. If the full script collection exceeds the character limit, additional parts will follow. Use this to update your understanding of the project until further updates.

================================================================================
UNITY PROJECT SCRIPT EXPORT - 2025-03-14 01:11:46
PART 3 OF 4
================================================================================

--------------------------------------------------------------------------------
Assets
├── DefaultVolumeProfile.asset
├── InputSystem_Actions.inputactions
├── Prefabs
│   ├── Node Presets
│   │   ├── Definition_DamageNode.asset
│   │   ├── Definition_ManaSource.asset
│   │   ├── Definition_Output.asset
│   │   └── NodeDefinitionLibrary.asset
│   └── UI
│       ├── NodeConnectionView.prefab
│       └── NodeView.prefab
├── Scenes
│   ├── MainScene.unity
│   └── SampleScene.unity
├── Scripts
│   ├── Battle
│   ├── Core
│   ├── Nodes
│   │   ├── Core
│   │   │   ├── NodeData.cs
│   │   │   ├── NodeDefinition.cs
│   │   │   ├── NodeDefinitionLibrary.cs
│   │   │   ├── NodeEffectData.cs
│   │   │   ├── NodeEffectType.cs
│   │   │   ├── NodePort.cs
│   │   │   └── PortDefinition.cs
│   │   ├── Runtime
│   │   │   ├── NodeExecutor.cs
│   │   │   └── NodeGraph.cs
│   │   ├── Testing
│   │   └── UI
│   │       ├── NodeConnectionView.cs
│   │       ├── NodeDraggable.cs
│   │       ├── NodeEditorController.cs
│   │       ├── NodeSelectable.cs
│   │       ├── NodeTestInitializer.cs
│   │       ├── NodeView.cs
│   │       ├── PinView.cs
│   │       └── UICubicBezier.cs
│   ├── UI
│   └── Wizards
├── Settings
│   ├── Lit2DSceneTemplate.scenetemplate
│   ├── Renderer2D.asset
│   ├── Scenes
│   │   └── URP2DSceneTemplate.unity
│   └── UniversalRP.asset
├── Sprites
│   └── MR-Platformer-v1
│       ├── Backgrounds
│       │   ├── merged-full-background.png
│       │   ├── parallax-background-mountains.png
│       │   ├── parallax-background-sky.png
│       │   ├── parallax-forest-trees-01.png
│       │   └── parallax-forest-trees-02.png
│       ├── Enemies
│       │   ├── Enemy-Bat-Fly-32x32.png
│       │   ├── Enemy-Boss-Golem-Idle-48x48.png
│       │   ├── Enemy-Dark-Guard-Idle-39x49.png
│       │   ├── Enemy-Forest-Goblin-Hog-Idle-32x32.png
│       │   ├── Enemy-Forest-Goblin-Idle-32x32.png
│       │   ├── Enemy-Frog-Attack-24x24.png
│       │   ├── Enemy-Frog-Idle-24x24.png
│       │   ├── Enemy-Frog-Tongue-Attack-72x24.png
│       │   ├── Enemy-Mushroom-Walk-24x24.png
│       │   ├── Enemy-Necromancer-Idle-32x32.png
│       │   ├── Enemy-Plant-Mutant-Idle-Attack-46x32.png
│       │   ├── Enemy-Skull-Slime-Idle-32x24.png
│       │   ├── Enemy-Snail-Attack-24x24.png
│       │   └── Enemy-Snail-Walk-24x24.png
│       ├── Misc
│       │   ├── Bridge-Support.png
│       │   ├── Bridge-handle-01.png
│       │   ├── Bridge-handle-02.png
│       │   ├── Bridge.png
│       │   ├── Bush-Background.png
│       │   ├── Bush-Green-Foreground.png
│       │   ├── Bush-Purple-Foreground.png
│       │   ├── Cave-Background-Hole-01.png
│       │   ├── Cave-Background-Rocks-01.png
│       │   ├── Cave-Background-Rocks-02.png
│       │   ├── Cave-Background.png
│       │   ├── Cave-Entrance.png
│       │   ├── Grass-Green-Foreground.png
│       │   ├── Grass-Purple-Foreground.png
│       │   ├── House-01.png
│       │   ├── House-02.png
│       │   ├── House-Background-01.png
│       │   ├── House-Background-02
│       │   ├── Lamp-Off.png
│       │   ├── Lamp-On.png
│       │   └── Mushrooms.png
│       ├── NPC
│       │   ├── NPC-Alchemist-Idle-24x24.png
│       │   ├── NPC-Blacksmith-Idle-48x48.png
│       │   ├── NPC-Builder-01-Working-24x24.png
│       │   ├── NPC-Builder-02-Working-24x24.png
│       │   ├── NPC-Chick-Idle-16x16.png
│       │   ├── NPC-Miner-Idle-24x24.png
│       │   ├── NPC-Old-Shaman-Idle-24x24.png
│       │   ├── NPC-Puppy-Idle-24x24.png
│       │   ├── NPC-Village-Guard-Idle-32x32.png
│       │   ├── NPC-Village-Lady-01-Talk-24x24.png
│       │   └── NPC-Village-Lady-02-Idle-24x24.png
│       ├── Objects
│       │   ├── Obj-Arrow-Idle-12x12.png
│       │   ├── Obj-Arrow-Stuck-12x12.png
│       │   ├── Obj-Axe-Wood.png
│       │   ├── Obj-Barrel.png
│       │   ├── Obj-Big-Wood-Platform-01.png
│       │   ├── Obj-Big-Wood-Platform-02.png
│       │   ├── Obj-Blue-Mineral.png
│       │   ├── Obj-Boxes.png
│       │   ├── Obj-Cage.png
│       │   ├── Obj-Checkpoint-Off.png
│       │   ├── Obj-Checkpoint-On.png
│       │   ├── Obj-Chest-Closed-24x24.png
│       │   ├── Obj-Chest-Opening-24x24.png
│       │   ├── Obj-Crystal-Idle-32x32.png
│       │   ├── Obj-Crystal-Open-32x32.png
│       │   ├── Obj-Dreamcatcher-01.png
│       │   ├── Obj-Dreamcatcher-02.png
│       │   ├── Obj-Dreamcatcher-03.png
│       │   ├── Obj-Fence.png
│       │   ├── Obj-Flag-Hanging-01.png
│       │   ├── Obj-Gate-Hold.png
│       │   ├── Obj-Gate-Pillar.png
│       │   ├── Obj-Green-Mineral.png
│       │   ├── Obj-Hanging-Flag-01.png
│       │   ├── Obj-Hanging-Flag-02.png
│       │   ├── Obj-Hanging-Flag-Medium.png
│       │   ├── Obj-Idol.png
│       │   ├── Obj-Key.png
│       │   ├── Obj-Lamp-On.png
│       │   ├── Obj-Light-01.png
│       │   ├── Obj-Mine-Carriage.png
│       │   ├── Obj-Moving-Platform-Idle-48x28.png
│       │   ├── Obj-Orange-Mineral.png
│       │   ├── Obj-Pickaxe.png
│       │   ├── Obj-Roof-Hanging.png
│       │   ├── Obj-Short-Roof.png
│       │   ├── Obj-Stairs.png
│       │   ├── Obj-Statue.png
│       │   ├── Obj-Village-Gate-Top.png
│       │   ├── Obj-Wood-Pillar-01.png
│       │   ├── Obj-Wood-Platform-01.png
│       │   ├── Obj-Wood-Platform-02.png
│       │   ├── Obj-Wood-Platform-Tall-02.png
│       │   ├── Obj-Wood-Platform-Tall.png
│       │   ├── Obj-Wood-Platform-Top.png
│       │   └── Obj-Wood.png
│       ├── Player
│       │   ├── Player-Attack-24x24.png
│       │   ├── Player-Fall-24x24.png
│       │   ├── Player-Idle-24x24.png
│       │   ├── Player-Jump-24x24.png
│       │   └── Player-Run-24x24.png
│       ├── Tiles
│       │   ├── Cave-Under-Tile.png
│       │   ├── Tile-01.png
│       │   ├── Tile-02.png
│       │   ├── Tile-03.png
│       │   ├── Tile-04.png
│       │   ├── Tile-05.png
│       │   ├── Tile-06.png
│       │   ├── Tile-07.png
│       │   ├── Tile-08.png
│       │   ├── Tile-09.png
│       │   ├── Tile-10.png
│       │   ├── Tile-11.png
│       │   ├── Tile-12.png
│       │   ├── Tile-13.png
│       │   ├── Tile-14.png
│       │   ├── Tile-15.png
│       │   ├── Tile-16.png
│       │   ├── Tile-17.png
│       │   ├── Tile-18.png
│       │   ├── Tile-19.png
│       │   ├── Tile-20.png
│       │   ├── Tile-21.png
│       │   ├── Tile-22.png
│       │   ├── Tile-23.png
│       │   ├── Tile-24.png
│       │   ├── Tile-25.png
│       │   ├── Tile-26.png
│       │   ├── Tile-27.png
│       │   ├── Tile-28.png
│       │   ├── Tile-29.png
│       │   ├── Tile-30.png
│       │   ├── Tile-31.png
│       │   ├── Tile-32.png
│       │   ├── Tile-33.png
│       │   ├── Tile-34.png
│       │   ├── Tile-35.png
│       │   ├── Tile-36.png
│       │   ├── Tile-37.png
│       │   ├── Tree-Trunk-01.png
│       │   └── Tree-Trunk-02.png
│       └── UI
│           ├── Quest-Mark-Idle-16x16.png
│           ├── UI-Boss-Icon.png
│           ├── UI-Lives.png
│           ├── UI-Menu-Button-Active.png
│           ├── UI-Menu-Button-Default.png
│           └── UI-Menu-Popup-Background.png
├── Test
├── TextMesh Pro
│   ├── Examples & Extras
│   │   ├── Fonts
│   │   │   ├── Anton OFL.txt
│   │   │   ├── Anton.ttf
│   │   │   ├── Bangers - OFL.txt
│   │   │   ├── Bangers.ttf
│   │   │   ├── Electronic Highway Sign.TTF
│   │   │   ├── Oswald-Bold - OFL.txt
│   │   │   ├── Oswald-Bold.ttf
│   │   │   ├── Roboto-Bold - AFL.txt
│   │   │   ├── Roboto-Bold - License.txt
│   │   │   ├── Roboto-Bold.ttf
│   │   │   ├── Unity - OFL.txt
│   │   │   └── Unity.ttf
│   │   ├── Materials
│   │   │   ├── Crate - Surface Shader Scene.mat
│   │   │   ├── Crate - URP.mat
│   │   │   ├── Ground - Logo Scene.mat
│   │   │   ├── Ground - Surface Shader Scene.mat
│   │   │   ├── Ground - URP.mat
│   │   │   └── Small Crate_diffuse.mat
│   │   ├── Prefabs
│   │   │   ├── Text Popup.prefab
│   │   │   ├── TextMeshPro - Prefab 1.prefab
│   │   │   └── TextMeshPro - Prefab 2.prefab
│   │   ├── Resources
│   │   │   ├── Color Gradient Presets
│   │   │   │   ├── Blue to Purple - Vertical.asset
│   │   │   │   ├── Dark to Light Green - Vertical.asset
│   │   │   │   ├── Light to Dark Green - Vertical.asset
│   │   │   │   └── Yellow to Orange - Vertical.asset
│   │   │   ├── Fonts & Materials
│   │   │   │   ├── Anton SDF - Drop Shadow.mat
│   │   │   │   ├── Anton SDF - Outline.mat
│   │   │   │   ├── Anton SDF - Sunny Days.mat
│   │   │   │   ├── Anton SDF.asset
│   │   │   │   ├── Bangers SDF - Drop Shadow - 2 Pass.mat
│   │   │   │   ├── Bangers SDF - Drop Shadow.mat
│   │   │   │   ├── Bangers SDF - Outline.mat
│   │   │   │   ├── Bangers SDF Glow.mat
│   │   │   │   ├── Bangers SDF Logo - URP.mat
│   │   │   │   ├── Bangers SDF Logo.mat
│   │   │   │   ├── Bangers SDF.asset
│   │   │   │   ├── Electronic Highway Sign SDF.asset
│   │   │   │   ├── LiberationSans SDF - Metalic Green.mat
│   │   │   │   ├── LiberationSans SDF - Overlay.mat
│   │   │   │   ├── LiberationSans SDF - Soft Mask.mat
│   │   │   │   ├── Oswald Bold SDF.asset
│   │   │   │   ├── Roboto-Bold SDF - Drop Shadow.mat
│   │   │   │   ├── Roboto-Bold SDF - HDRP Unlit.mat
│   │   │   │   ├── Roboto-Bold SDF - Surface.mat
│   │   │   │   ├── Roboto-Bold SDF - URP.mat
│   │   │   │   ├── Roboto-Bold SDF.asset
│   │   │   │   ├── Unity SDF - HDRP LIT - Bloom.mat
│   │   │   │   ├── Unity SDF - HDRP LIT - Outline.mat
│   │   │   │   └── Unity SDF.asset
│   │   │   └── Sprite Assets
│   │   │       ├── Default Sprite Asset.asset
│   │   │       └── DropCap Numbers.asset
│   │   ├── Scenes
│   │   │   ├── 01-  Single Line TextMesh Pro.unity
│   │   │   ├── 02 - Multi-line TextMesh Pro.unity
│   │   │   ├── 03 - Line Justification.unity
│   │   │   ├── 04 - Word Wrapping.unity
│   │   │   ├── 05 - Style Tags.unity
│   │   │   ├── 06 - Extra Rich Text Examples.unity
│   │   │   ├── 07 - Superscript & Subscript Example.unity
│   │   │   ├── 08 - Improved Text Alignment.unity
│   │   │   ├── 09 - Margin Tag Example.unity
│   │   │   ├── 10 - Bullets & Numbered List Example.unity
│   │   │   ├── 11 - The Style Tag.unity
│   │   │   ├── 12 - Link Example.unity
│   │   │   ├── 12a - Text Interactions.unity
│   │   │   ├── 13 - Soft Hyphenation.unity
│   │   │   ├── 14 - Multi Font & Sprites.unity
│   │   │   ├── 15 - Inline Graphics & Sprites.unity
│   │   │   ├── 16 - Linked text overflow mode example.unity
│   │   │   ├── 17 - Old Computer Terminal.unity
│   │   │   ├── 18 - ScrollRect & Masking & Layout.unity
│   │   │   ├── 19 - Masking Texture & Soft Mask.unity
│   │   │   ├── 20 - Input Field with Scrollbar.unity
│   │   │   ├── 21 - Script Example.unity
│   │   │   ├── 22 - Basic Scripting Example.unity
│   │   │   ├── 23 - Animating Vertex Attributes.unity
│   │   │   ├── 24 - Surface Shader Example URP.unity
│   │   │   ├── 24 - Surface Shader Example.unity
│   │   │   ├── 25 - Sunny Days Example.unity
│   │   │   ├── 26 - Dropdown Placeholder Example.unity
│   │   │   ├── 27 - Double Pass Shader Example.unity
│   │   │   ├── 28 - HDRP Shader Example
│   │   │   │   └── Sky and Fog Volume Profile.asset
│   │   │   ├── 28 - HDRP Shader Example.unity
│   │   │   └── Benchmark (Floating Text).unity
│   │   ├── Scripts
│   │   │   ├── Benchmark01.cs
│   │   │   ├── Benchmark01_UGUI.cs
│   │   │   ├── Benchmark02.cs
│   │   │   ├── Benchmark03.cs
│   │   │   ├── Benchmark04.cs
│   │   │   ├── CameraController.cs
│   │   │   ├── ChatController.cs
│   │   │   ├── DropdownSample.cs
│   │   │   ├── EnvMapAnimator.cs
│   │   │   ├── ObjectSpin.cs
│   │   │   ├── ShaderPropAnimator.cs
│   │   │   ├── SimpleScript.cs
│   │   │   ├── SkewTextExample.cs
│   │   │   ├── TMP_DigitValidator.cs
│   │   │   ├── TMP_ExampleScript_01.cs
│   │   │   ├── TMP_FrameRateCounter.cs
│   │   │   ├── TMP_PhoneNumberValidator.cs
│   │   │   ├── TMP_TextEventCheck.cs
│   │   │   ├── TMP_TextEventHandler.cs
│   │   │   ├── TMP_TextInfoDebugTool.cs
│   │   │   ├── TMP_TextSelector_A.cs
│   │   │   ├── TMP_TextSelector_B.cs
│   │   │   ├── TMP_UiFrameRateCounter.cs
│   │   │   ├── TMPro_InstructionOverlay.cs
│   │   │   ├── TeleType.cs
│   │   │   ├── TextConsoleSimulator.cs
│   │   │   ├── TextMeshProFloatingText.cs
│   │   │   ├── TextMeshSpawner.cs
│   │   │   ├── VertexColorCycler.cs
│   │   │   ├── VertexJitter.cs
│   │   │   ├── VertexShakeA.cs
│   │   │   ├── VertexShakeB.cs
│   │   │   ├── VertexZoom.cs
│   │   │   └── WarpTextExample.cs
│   │   ├── Sprites
│   │   │   ├── Default Sprites.png
│   │   │   └── DropCap Numbers.psd
│   │   └── Textures
│   │       ├── Brushed Metal 3.jpg
│   │       ├── Floor Cement.jpg
│   │       ├── Floor Tiles 1 - diffuse.jpg
│   │       ├── Fruit Jelly (B&W).jpg
│   │       ├── Gradient Diagonal (Color).jpg
│   │       ├── Gradient Horizontal (Color).jpg
│   │       ├── Gradient Vertical (Color).jpg
│   │       ├── Mask Zig-n-Zag.psd
│   │       ├── Small Crate_diffuse.jpg
│   │       ├── Small Crate_normal.jpg
│   │       ├── Sunny Days - Seamless.jpg
│   │       ├── Text Overflow - Linked Text Image 1.png
│   │       ├── Text Overflow - Linked Text UI Screenshot.png
│   │       ├── Wipe Pattern - Circle.psd
│   │       ├── Wipe Pattern - Diagonal.psd
│   │       ├── Wipe Pattern - Radial Double.psd
│   │       └── Wipe Pattern - Radial Quad.psd
│   ├── Fonts
│   │   ├── LiberationSans - OFL.txt
│   │   └── LiberationSans.ttf
│   ├── Resources
│   │   ├── Fonts & Materials
│   │   │   ├── LiberationSans SDF - Drop Shadow.mat
│   │   │   ├── LiberationSans SDF - Fallback.asset
│   │   │   ├── LiberationSans SDF - Outline.mat
│   │   │   └── LiberationSans SDF.asset
│   │   ├── LineBreaking Following Characters.txt
│   │   ├── LineBreaking Leading Characters.txt
│   │   ├── Sprite Assets
│   │   │   └── EmojiOne.asset
│   │   ├── Style Sheets
│   │   │   └── Default Style Sheet.asset
│   │   └── TMP Settings.asset
│   ├── Shaders
│   │   ├── SDFFunctions.hlsl
│   │   ├── TMP_Bitmap-Custom-Atlas.shader
│   │   ├── TMP_Bitmap-Mobile.shader
│   │   ├── TMP_Bitmap.shader
│   │   ├── TMP_SDF Overlay.shader
│   │   ├── TMP_SDF SSD.shader
│   │   ├── TMP_SDF-HDRP LIT.shadergraph
│   │   ├── TMP_SDF-HDRP UNLIT.shadergraph
│   │   ├── TMP_SDF-Mobile Masking.shader
│   │   ├── TMP_SDF-Mobile Overlay.shader
│   │   ├── TMP_SDF-Mobile SSD.shader
│   │   ├── TMP_SDF-Mobile-2-Pass.shader
│   │   ├── TMP_SDF-Mobile.shader
│   │   ├── TMP_SDF-Surface-Mobile.shader
│   │   ├── TMP_SDF-Surface.shader
│   │   ├── TMP_SDF-URP Lit.shadergraph
│   │   ├── TMP_SDF-URP Unlit.shadergraph
│   │   ├── TMP_SDF.shader
│   │   ├── TMP_Sprite.shader
│   │   ├── TMPro.cginc
│   │   ├── TMPro_Mobile.cginc
│   │   ├── TMPro_Properties.cginc
│   │   └── TMPro_Surface.cginc
│   └── Sprites
│       ├── EmojiOne Attribution.txt
│       ├── EmojiOne.json
│       └── EmojiOne.png
└── UniversalRenderPipelineGlobalSettings.asset
--------------------------------------------------------------------------------

SCRIPT CONTENTS
================================================================================

SCRIPT CONTENTS
================================================================================

////////////////////////////////////////////////////////////////////////////////
// FILE: Assets\Scripts\Nodes\UI\NodeEditorController.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using System.Collections.Generic;
using System.Linq;

public class NodeEditorController : MonoBehaviour, IScrollHandler, IDragHandler
{
    [Header("Node Editor References")]
    [Tooltip("Spawned node prefabs go here.")]
    [SerializeField] private GameObject nodeViewPrefab;

    [Tooltip("Spawned connection lines (NodeConnectionView) go here.")]
    [SerializeField] private GameObject connectionViewPrefab;

    [Tooltip("If you have a NodeDefinitionLibrary, assign it here for right-click creation.")]
    [SerializeField] private NodeDefinitionLibrary definitionLibrary;

    [Tooltip("The NodeGraph that stores all nodes & adjacency.")]
    [SerializeField] private NodeGraph currentGraph;

    [Tooltip("Optional link to NodeExecutor so we can pass updated graphs to it.")]
    [SerializeField] private NodeExecutor executor;

    // For connection dragging
    private NodeConnectionView draggingLine;
    private PinView sourcePin;

    // Context menu
    private bool showContextMenu = false;
    private Vector2 contextMenuPosition;

    private List<NodeView> spawnedNodeViews = new List<NodeView>();

    private void Awake()
    {
        // Ensure there's a transparent Image on this panel so it receives pointer events.
        var thisRect = GetComponent<RectTransform>();
        if (thisRect == null)
        {
            Debug.LogError("[NodeEditorController] The GameObject must have a RectTransform!");
            return;
        }

        // If no Image is present, add one so we can receive scroll & drag events.
        var image = GetComponent<Image>();
        if (image == null)
        {
            image = gameObject.AddComponent<Image>();
            image.color = new Color(1,1,1,0);   // fully transparent
            image.raycastTarget = true;
        }
    }

    private void Start()
    {
        // If no graph assigned, create an empty one
        if (currentGraph == null)
        {
            currentGraph = new NodeGraph();
        }

        // If no executor assigned, try to find one
        if (executor == null)
        {
            executor = GameObject.FindFirstObjectByType<NodeExecutor>();
            if (executor != null)
                executor.SetGraph(currentGraph);
            else
                Debug.LogWarning("[NodeEditorController] No NodeExecutor found in the scene.");
        }
    }

    private void Update()
    {
        // Right-click for context menu
        if (Input.GetMouseButtonDown(1))
        {
            showContextMenu = true;
            contextMenuPosition = Input.mousePosition;
        }
    }

    private void OnGUI()
    {
        if (showContextMenu && definitionLibrary != null && definitionLibrary.definitions.Count > 0)
        {
            Vector2 guiPos = new Vector2(contextMenuPosition.x, Screen.height - contextMenuPosition.y);
            float menuHeight = 20 + (definitionLibrary.definitions.Count * 25);
            Rect menuRect = new Rect(guiPos.x, guiPos.y, 180, menuHeight);

            GUI.Box(menuRect, "Add Node");

            float yOffset = 20f;
            foreach (NodeDefinition def in definitionLibrary.definitions)
            {
                Rect itemRect = new Rect(menuRect.x, menuRect.y + yOffset, 180, 25);
                if (GUI.Button(itemRect, def.displayName))
                {
                    CreateNodeAtMouse(def);
                    showContextMenu = false;
                }
                yOffset += 25f;
            }
        }
    }

    private void CreateNodeAtMouse(NodeDefinition definition)
    {
        // Convert screen to local position
        Vector2 localPos;
        RectTransformUtility.ScreenPointToLocalPointInRectangle(
            (RectTransform)transform, Input.mousePosition, null, out localPos);

        NodeData newNode = new NodeData();
        newNode.nodeDisplayName = definition.displayName;
        newNode.editorPosition = localPos;
        newNode.backgroundColor = definition.backgroundColor;

        // Copy effects
        foreach (var defEffect in definition.effects)
        {
            NodeEffectData eff = new NodeEffectData
            {
                effectType = defEffect.effectType,
                effectValue = defEffect.effectValue,
                secondaryValue = defEffect.secondaryValue
            };
            newNode.effects.Add(eff);
        }

        // Copy ports
        foreach (var portDef in definition.ports)
        {
            NodePort nPort = new NodePort
            {
                portName = portDef.portName,
                portType = portDef.portType
            };
            if (portDef.isInput)
                newNode.inputs.Add(nPort);
            else
                newNode.outputs.Add(nPort);
        }

        currentGraph.nodes.Add(newNode);
        CreateNodeView(newNode);

        // Update executor
        if (executor != null)
            executor.SetGraph(currentGraph);
    }

    private NodeView CreateNodeView(NodeData data)
    {
        GameObject nodeObj = Instantiate(nodeViewPrefab, transform); // parent is NodeEditorPanel
        NodeView view = nodeObj.GetComponent<NodeView>();

        view.Initialize(data, data.backgroundColor, data.nodeDisplayName);

        RectTransform rt = nodeObj.GetComponent<RectTransform>();
        rt.anchoredPosition = data.editorPosition;

        view.GeneratePins(data.inputs, data.outputs);

        spawnedNodeViews.Add(view);
        return view;
    }

    // Connection Dragging

    public void StartConnectionDrag(PinView source, PointerEventData eventData)
    {
        Debug.Log("[NodeEditor] StartConnectionDrag");
        sourcePin = source;

        GameObject lineObj = Instantiate(connectionViewPrefab, transform);
        draggingLine = lineObj.GetComponent<NodeConnectionView>();

        RectTransform sourceRect = source.GetComponent<RectTransform>();
        draggingLine.sourcePin = source;
        draggingLine.StartPreview(sourceRect);
    }

    public void UpdateConnectionDrag(PinView draggingPin, PointerEventData eventData)
    {
        // NodeConnectionView handles the preview
    }

    public void EndConnectionDrag(PinView draggingPin, PointerEventData eventData)
    {
        if (draggingLine == null)
            return;

        List<RaycastResult> results = new List<RaycastResult>();
        EventSystem.current.RaycastAll(eventData, results);
        PinView targetPin = null;
        foreach (var r in results)
        {
            targetPin = r.gameObject.GetComponent<PinView>();
            if (targetPin != null && targetPin.isInput)
                break;
            else
                targetPin = null;
        }

        if (targetPin != null)
        {
            RectTransform targetRect = targetPin.GetComponent<RectTransform>();
            draggingLine.targetPin = targetPin;
            draggingLine.FinalizeConnection(targetRect);

            // If both pins are Mana => record in manaConnections
            if (sourcePin.port.portType == PortType.Mana && targetPin.port.portType == PortType.Mana)
            {
                string sourceId = GetNodeIdFromPin(sourcePin);
                string targetId = GetNodeIdFromPin(targetPin);
                if (currentGraph.manaConnections == null)
                    currentGraph.manaConnections = new Dictionary<string, string>();
                currentGraph.manaConnections[targetId] = sourceId;
            }
            // If both pins are General => record adjacency
            else if (sourcePin.port.portType == PortType.General && targetPin.port.portType == PortType.General)
            {
                string sourceId = GetNodeIdFromPin(sourcePin);
                string targetId = GetNodeIdFromPin(targetPin);
                if (currentGraph.adjacency == null)
                    currentGraph.adjacency = new Dictionary<string, List<string>>();
                if (!currentGraph.adjacency.ContainsKey(sourceId))
                    currentGraph.adjacency[sourceId] = new List<string>();
                if (!currentGraph.adjacency[sourceId].Contains(targetId))
                    currentGraph.adjacency[sourceId].Add(targetId);
            }

            Debug.Log("[NodeEditor] Connection finalized");
        }
        else
        {
            Debug.Log("[NodeEditor] Connection canceled");
            Destroy(draggingLine.gameObject);
        }

        draggingLine = null;
        sourcePin = null;
    }

    // Zoom (mouse wheel) & Pan (drag the panel)
    public void OnScroll(PointerEventData eventData)
    {
        Debug.Log($"[NodeEditor] OnScroll => {eventData.scrollDelta}");
        float scrollDelta = eventData.scrollDelta.y;
        float newScale = transform.localScale.x + scrollDelta * 0.05f;
        newScale = Mathf.Clamp(newScale, 0.4f, 2f);
        transform.localScale = Vector3.one * newScale;
    }

    public void OnDrag(PointerEventData eventData)
    {
        Debug.Log($"[NodeEditor] OnDrag => {eventData.delta}");
        RectTransform rt = (RectTransform)transform;
        rt.anchoredPosition += eventData.delta;
    }

    // LoadGraph for NodeTestInitializer or other usage
    public void LoadGraph(NodeGraph graph)
    {
        currentGraph = graph;
        ClearExistingViews();
        if (currentGraph == null) return;

        foreach (var node in currentGraph.nodes)
        {
            CreateNodeView(node);
        }

        if (executor != null)
            executor.SetGraph(currentGraph);
    }

    public string GetNodeIdFromPin(PinView pin)
    {
        NodeView view = pin.GetComponentInParent<NodeView>();
        return view.GetNodeData().nodeId;
    }

    public NodeGraph CurrentGraph => currentGraph;

    private void ClearExistingViews()
    {
        foreach (var view in spawnedNodeViews)
        {
            if (view != null)
                Destroy(view.gameObject);
        }
        spawnedNodeViews.Clear();
    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Assets\Scripts\Nodes\UI\NodeSelectable.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class NodeSelectable : MonoBehaviour, IPointerClickHandler
{
    private static GameObject currentSelected;

    // Reference to an Outline component added to the NodeView prefab.
    [SerializeField] private Outline outline;

    public void OnPointerClick(PointerEventData eventData)
    {
        Select(gameObject);
    }

    public static void Select(GameObject node)
    {
        if (currentSelected != null && currentSelected != node)
        {
            // Remove highlight from previously selected node.
            var prevOutline = currentSelected.GetComponent<Outline>();
            if (prevOutline != null)
                prevOutline.enabled = false;
        }
        currentSelected = node;
        var outlineComp = node.GetComponent<Outline>();
        if (outlineComp != null)
            outlineComp.enabled = true;
    }
}




////////////////////////////////////////////////////////////////////////////////
// FILE: Assets\Scripts\Nodes\UI\NodeTestInitializer.cs
////////////////////////////////////////////////////////////////////////////////
﻿// Assets/Scripts/Nodes/Testing/NodeTestInitializer.cs
using UnityEngine;
// If NodeEditorController is in a specific namespace, include it, e.g.:
// using YourProject.Nodes.UI;

public class NodeTestInitializer : MonoBehaviour
{
    [SerializeField] private NodeEditorController editorController;

    private NodeGraph testGraph;

    void Start()
    {
        testGraph = new NodeGraph();
        // Load the empty graph into the editor
        editorController.LoadGraph(testGraph);
    }
    
}





--------------------------------------------------------------------------------
This is part 3 out of 4 of script collection. 1 more parts remain.
--------------------------------------------------------------------------------