This document contains extracted Unity C# scripts from my dualgrid 3rd party tilemap package plugin.

================================================================================
UNITY PROJECT SCRIPT EXPORT - 2025-04-10 23:44:12
PART 1 OF 4
================================================================================

--------------------------------------------------------------------------------
Assets
├── Animation
│   ├── MiniVillagerMan_Animator.controller
│   └── MiniVillagerMan_AnimatorBackup.controller
├── DefaultVolumeProfile.asset
├── Editor
│   ├── NodeDefinitionAutoAdder.cs
│   ├── NodeDefinitionCreator.cs
│   ├── NodeDefinitionEditor.cs
│   ├── NodeDefinitionLibraryEditor.cs
│   ├── NodeDefinitionPostprocessor.cs
│   └── NodeEffectDrawer.cs
├── HueFolders
│   ├── Editor
│   │   ├── HueFolders.Editor.asmdef
│   │   ├── HueFoldersBrowser.cs
│   │   └── SettingsProvider.cs
│   ├── Readme.pdf
│   └── package.json
├── InputSystem_Actions.inputactions
├── Materials
│   ├── BezierCurveAA_Material.mat
│   └── Firefly_Glow_Material.mat
├── Post Processing
├── Prefabs
│   ├── Ecosystem
│   │   ├── Animals
│   │   │   ├── Animal_Bird.prefab
│   │   │   ├── Animal_Bunny.prefab
│   │   │   ├── Animal_Fox.prefab
│   │   │   └── FireflyPrefab.prefab
│   │   ├── Plants
│   │   │   ├── PixelBerry.prefab
│   │   │   ├── PixelFlower.prefab
│   │   │   ├── PixelLeaf.prefab
│   │   │   ├── PixelSeed.prefab
│   │   │   ├── PixelStem.prefab
│   │   │   └── PlantPrefab.prefab
│   │   ├── Props
│   │   │   ├── Poop_Big.prefab
│   │   │   ├── Poop_Medium_01.prefab
│   │   │   └── Poop_Medium_02.prefab
│   │   └── UI
│   │       ├── EmptySlot16.prefab
│   │       ├── EmptySlot32.prefab
│   │       ├── Indicator_Opportunity.prefab
│   │       ├── Indicator_Resource.prefab
│   │       ├── Indicator_Threat.prefab
│   │       ├── NodeCellEmpty16.prefab
│   │       ├── NodePics
│   │       │   ├── Seed_01.prefab
│   │       │   └── Seed_02.prefab
│   │       ├── NodeView.prefab
│   │       ├── ThoughtBubble.prefab
│   │       ├── Visualizer_Circle_Prefab.prefab
│   │       └── Visualizer_Line_Prefab.prefab
│   ├── General
│   │   ├── GardenerPrefab.prefab
│   │   └── Projectile_Basic_Pixel.prefab
│   └── Tiles
│       ├── Common
│       │   ├── PLains_0_Corner_LT.asset
│       │   ├── PLains_10.asset
│       │   ├── PLains_100.asset
│       │   ├── PLains_101.asset
│       │   ├── PLains_102.asset
│       │   ├── PLains_11.asset
│       │   ├── PLains_12.asset
│       │   ├── PLains_13.asset
│       │   ├── PLains_14.asset
│       │   ├── PLains_15.asset
│       │   ├── PLains_16.asset
│       │   ├── PLains_17.asset
│       │   ├── PLains_18.asset
│       │   ├── PLains_19.asset
│       │   ├── PLains_1_T.asset
│       │   ├── PLains_20.asset
│       │   ├── PLains_21.asset
│       │   ├── PLains_22.asset
│       │   ├── PLains_23.asset
│       │   ├── PLains_24.asset
│       │   ├── PLains_25.asset
│       │   ├── PLains_26.asset
│       │   ├── PLains_27.asset
│       │   ├── PLains_28.asset
│       │   ├── PLains_29.asset
│       │   ├── PLains_2_Corner_RT.asset
│       │   ├── PLains_30.asset
│       │   ├── PLains_31.asset
│       │   ├── PLains_32.asset
│       │   ├── PLains_33.asset
│       │   ├── PLains_34.asset
│       │   ├── PLains_35.asset
│       │   ├── PLains_36.asset
│       │   ├── PLains_37.asset
│       │   ├── PLains_38.asset
│       │   ├── PLains_39.asset
│       │   ├── PLains_3_Single_B.asset
│       │   ├── PLains_40.asset
│       │   ├── PLains_41.asset
│       │   ├── PLains_42.asset
│       │   ├── PLains_43.asset
│       │   ├── PLains_44.asset
│       │   ├── PLains_45.asset
│       │   ├── PLains_46.asset
│       │   ├── PLains_47.asset
│       │   ├── PLains_48.asset
│       │   ├── PLains_49.asset
│       │   ├── PLains_4_Single_B.TR.asset
│       │   ├── PLains_5.asset
│       │   ├── PLains_50.asset
│       │   ├── PLains_51.asset
│       │   ├── PLains_52_Grass_Center.asset
│       │   ├── PLains_53_Grass_Center.asset
│       │   ├── PLains_54_Grass_Center.asset
│       │   ├── PLains_55.asset
│       │   ├── PLains_56_Grass_Center.asset
│       │   ├── PLains_57.asset
│       │   ├── PLains_58.asset
│       │   ├── PLains_59.asset
│       │   ├── PLains_6.asset
│       │   ├── PLains_60.asset
│       │   ├── PLains_61_Grass_Center.asset
│       │   ├── PLains_62_Grass_Center.asset
│       │   ├── PLains_63.asset
│       │   ├── PLains_64_Grass_Center.asset
│       │   ├── PLains_65.asset
│       │   ├── PLains_66.asset
│       │   ├── PLains_67.asset
│       │   ├── PLains_68.asset
│       │   ├── PLains_69.asset
│       │   ├── PLains_7.asset
│       │   ├── PLains_70.asset
│       │   ├── PLains_71.asset
│       │   ├── PLains_72.asset
│       │   ├── PLains_73.asset
│       │   ├── PLains_74.asset
│       │   ├── PLains_75.asset
│       │   ├── PLains_76.asset
│       │   ├── PLains_77.asset
│       │   ├── PLains_78.asset
│       │   ├── PLains_79.asset
│       │   ├── PLains_8.asset
│       │   ├── PLains_80.asset
│       │   ├── PLains_81.asset
│       │   ├── PLains_82.asset
│       │   ├── PLains_83.asset
│       │   ├── PLains_84.asset
│       │   ├── PLains_85.asset
│       │   ├── PLains_86.asset
│       │   ├── PLains_87.asset
│       │   ├── PLains_88.asset
│       │   ├── PLains_89.asset
│       │   ├── PLains_9.asset
│       │   ├── PLains_90.asset
│       │   ├── PLains_91.asset
│       │   ├── PLains_92.asset
│       │   ├── PLains_93.asset
│       │   ├── PLains_94.asset
│       │   ├── PLains_95.asset
│       │   ├── PLains_96.asset
│       │   ├── PLains_97.asset
│       │   ├── PLains_98.asset
│       │   └── PLains_99.asset
│       ├── Palettes
│       │   └── PaletteDual_Ground.prefab
│       └── Rule Tiles
│           ├── DualGridRuleTile_Dirt.asset
│           └── DualGridRuleTile_Grass.asset
├── Scenes
│   ├── MainScene.unity
│   ├── SampleScene
│   │   └── GlobalPostProcessVolume Profile.asset
│   └── SampleScene.unity
├── Scriptable Objects
│   ├── Animals
│   │   ├── AnimalLibrary.asset
│   │   └── Animal_000_Bunny.asset
│   ├── Animals Diet
│   │   └── Diet_000_Bunny.asset
│   ├── Food
│   │   ├── FoodType_000_Berry.asset
│   │   └── FoodType_000_Leaf.asset
│   ├── Life Thoughts
│   │   └── AnimalThoughtLibrary.asset
│   ├── Nodes Plant
│   │   ├── NodeDefinitionLibrary.asset
│   │   ├── Node_000_Seed.asset
│   │   ├── Node_001_Berry.asset
│   │   └── Node_002_FireflyPheromone.asset
│   ├── Scents
│   │   ├── ScentLibrary.asset
│   │   └── Scent_000_FireflyPheromone.asset
│   ├── Tiles
│   │   ├── TileInteractionLibrary.asset
│   │   ├── TileTypeDef_000_Grass.asset
│   │   ├── TileTypeDef_001_Dirt.asset
│   │   └── TileTypeDef_002_DirtWet.asset
│   └── Tools
│       ├── ToolDef_000_Hoe.asset
│       └── ToolDef_001_WateringCan.asset
├── Scripts
│   ├── Battle
│   │   ├── Plant
│   │   │   ├── PlantCell.cs
│   │   │   ├── PlantGrowth.cs
│   │   │   └── WeatherManager.cs
│   │   ├── SpellProjectile.cs
│   │   └── Status Effects
│   │       ├── BurningStatusEffect.cs
│   │       └── StatusEffect.cs
│   ├── Core
│   │   └── SortableEntity.cs
│   ├── Ecosystem
│   │   ├── Animals
│   │   │   ├── AnimalDefinition.cs
│   │   │   └── AnimalLibrary.cs
│   │   ├── Core
│   │   │   ├── AnimalController.cs
│   │   │   ├── AnimalSpawnData.cs
│   │   │   ├── AnimalThoughtLibrary.cs
│   │   │   ├── EcosystemManager.cs
│   │   │   ├── FaunaManager.cs
│   │   │   ├── FloraManager.cs
│   │   │   ├── PoopController.cs
│   │   │   ├── ScentSource.cs
│   │   │   ├── ThoughtBubbleController.cs
│   │   │   └── ThoughtTrigger.cs
│   │   ├── Effects
│   │   │   ├── FireflyController.cs
│   │   │   └── FireflyManager.cs
│   │   ├── Food
│   │   │   ├── AnimalDiet.cs
│   │   │   ├── FoodItem.cs
│   │   │   └── FoodType.cs
│   │   ├── Plants
│   │   └── Scents
│   │       ├── ScentDefinition.cs
│   │       └── ScentLibrary.cs
│   ├── Nodes
│   │   ├── Core
│   │   │   ├── NodeData.cs
│   │   │   ├── NodeDefinition.cs
│   │   │   ├── NodeDefinitionLibrary.cs
│   │   │   ├── NodeEffectData.cs
│   │   │   ├── NodeEffectType.cs
│   │   │   └── OutputNodeEffect.cs
│   │   ├── Runtime
│   │   │   ├── NodeExecutor.cs
│   │   │   └── NodeGraph.cs
│   │   └── UI
│   │       ├── ColorExtensions.cs
│   │       ├── DeselectOnClickOutside.cs
│   │       ├── NodeCell.cs
│   │       ├── NodeDraggable.cs
│   │       ├── NodeEditorGridController.cs
│   │       ├── NodeSelectable.cs
│   │       └── NodeView.cs
│   ├── Player
│   │   └── GardenerController.cs
│   ├── Tiles
│   │   ├── Data
│   │   │   ├── TileAction.cs
│   │   │   ├── TileInteractionLibrary.cs
│   │   │   ├── TileInteractionManager.cs
│   │   │   └── TileTypeDefinition.cs
│   │   └── Tools
│   │       └── ToolDefinition.cs
│   ├── UI
│   └── Visuals
│       ├── NightColorPostProcess.cs
│       └── RuntimeCircleDrawer.cs
├── Settings
│   ├── Lit2DSceneTemplate.scenetemplate
│   ├── Renderer2D.asset
│   ├── Scenes
│   │   └── URP2DSceneTemplate.unity
│   └── UniversalRP.asset
├── Shaders
│   ├── BezierCurveAA.shader
│   └── SpriteEmissiveUnlit.shader
├── TextureImporter.preset
└── UniversalRenderPipelineGlobalSettings.asset
--------------------------------------------------------------------------------

SCRIPT CONTENTS
================================================================================

SCRIPT CONTENTS
================================================================================

////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Editor\AutoDualGridRuleTileProvider.cs
////////////////////////////////////////////////////////////////////////////////
﻿using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using static skner.DualGrid.DualGridRuleTile;

namespace skner.DualGrid.Editor
{
    public static class AutoDualGridRuleTileProvider
    {

        private static readonly Vector3Int UpRightNeighbor = Vector3Int.up + Vector3Int.right;
        private static readonly Vector3Int UpLeftNeighbor = Vector3Int.up + Vector3Int.left;
        private static readonly Vector3Int DownRightNeighbor = Vector3Int.down + Vector3Int.right;
        private static readonly Vector3Int DownLeftNeighbor = Vector3Int.down + Vector3Int.left;

        private readonly struct NeighborPattern
        {
            public Vector3Int Position { get; }
            public int State { get; }

            public NeighborPattern(Vector3Int position, int state)
            {
                Position = position;
                State = state;
            }
        }

        private static List<NeighborPattern> CreatePattern(int upLeft, int upRight, int downLeft, int downRight)
        {
            return new List<NeighborPattern>
            {
                new NeighborPattern(UpLeftNeighbor, upLeft),
                new NeighborPattern(UpRightNeighbor, upRight),
                new NeighborPattern(DownLeftNeighbor, downLeft),
                new NeighborPattern(DownRightNeighbor, downRight)
            };
        }

        // Values are hardcoded like this because there's no simple algorithm to generate this. It's more performant and it doesn't read that badly
        private static readonly Dictionary<int, List<NeighborPattern>> NeighborConfigurationsByIndex = new()
        {
            { 0, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled) },
            { 1, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled) },
            { 2, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.Filled) },
            { 3, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.Filled) },
            { 4, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled) },
            { 5, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.Filled) },
            { 6, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.Filled) },
            { 7, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled) },
            { 8, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled) },
            { 9, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled) },
            { 10, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled) },
            { 11, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled) },
            { 12, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled) },
            { 13, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.Filled) },
            { 14, CreatePattern(DualGridNeighbor.NotFilled, DualGridNeighbor.Filled, DualGridNeighbor.Filled, DualGridNeighbor.NotFilled) },
            { 15, CreatePattern(DualGridNeighbor.Filled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled, DualGridNeighbor.NotFilled) },
        };

        /// <summary>
        /// Applies the standard expected configuration into the <see langword="ref"/> <paramref name="dualGridRuleTile"/> for <see cref="Texture2D"/> assets 
        /// that have been automatically sliced by the standard 16x tiles arrangement.
        /// </summary>
        /// <param name="dualGridRuleTile"></param>
        public static void ApplyConfigurationPreset(ref DualGridRuleTile dualGridRuleTile)
        {
            if (dualGridRuleTile.m_TilingRules.Count != 16)
            {
                Debug.LogWarning($"Could not apply configuration preset to {dualGridRuleTile.name} because the rule tile does not have exactly 16 sprites included.");
                return;
            }
            for (int i = 0; i < dualGridRuleTile.m_TilingRules.Count; i++)
            {
                var tilingRule = dualGridRuleTile.m_TilingRules[i];

                tilingRule.m_NeighborPositions = NeighborConfigurationsByIndex[i].Select(neightborPattern => neightborPattern.Position).ToList();
                tilingRule.m_Neighbors = NeighborConfigurationsByIndex[i].Select(neightborPattern => neightborPattern.State).ToList();
            }
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Editor\DualGridBrush.cs
////////////////////////////////////////////////////////////////////////////////
﻿using System.Collections.Generic;
using UnityEditor.Tilemaps;
using UnityEngine;
using UnityEngine.Tilemaps;

namespace skner.DualGrid.Editor
{
    /// <summary>
    /// A custom brush completely compatible with the standard tilemaps, with the added Dual Grid functionality.
    /// </summary>
    /// <remarks>
    /// It's responsible for updating the RenderTilemap when any tiles are updated in the DataTilemap.
    /// </remarks>
    [CustomGridBrush(true, true, true, "Dual Grid Brush")]
    public class DualGridBrush : GridBrush
    {

        public override void BoxFill(GridLayout gridLayout, GameObject brushTarget, BoundsInt bounds)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                SetDualGridTiles(dualGridTilemapModule, dualGridTilemapModule.DataTile, bounds);
            }
            else
            {
                base.BoxFill(gridLayout, brushTarget, bounds);
            }
        }

        public override void BoxErase(GridLayout gridLayout, GameObject brushTarget, BoundsInt bounds)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                SetDualGridTiles(dualGridTilemapModule, null, bounds);
            }
            else
            {
                base.BoxErase(gridLayout, brushTarget, bounds);
            }
        }

        public override void FloodFill(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                dualGridTilemapModule.DataTilemap.FloodFill(position, dualGridTilemapModule.DataTile);
            }
            else
            {
                base.FloodFill(gridLayout, brushTarget, position);
            }
        }

        private void SetDualGridTiles(DualGridTilemapModule dualGridTilemapModule, DualGridDataTile dualGridDataTile, BoundsInt bounds)
        {
            var tileChangeData = new List<TileChangeData>();

            foreach (var position in bounds.allPositionsWithin)
            {
                tileChangeData.Add(new TileChangeData { position = position, tile = dualGridDataTile });
            }

            dualGridTilemapModule.DataTilemap.SetTiles(tileChangeData.ToArray(), ignoreLockFlags: false);
            RefreshDualGridTilemap(dualGridTilemapModule, bounds);
        }

        protected virtual void RefreshDualGridTilemap(DualGridTilemapModule dualGridTilemapModule, BoundsInt bounds)
        {
            foreach (var position in bounds.allPositionsWithin)
            {
                dualGridTilemapModule.RefreshRenderTiles(position);
                dualGridTilemapModule.DataTilemap.RefreshTile(position);
            }
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Editor\DualGridRuleTilePreviewer.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.Tilemaps;

namespace skner.DualGrid.Editor
{
    public static class DualGridRuleTilePreviewer
    {

        private static Scene _previewScene;
        private static Camera _previewCamera;
        private static DualGridTilemapModule _previewDualGridTilemapModule;

        private static RenderTexture _renderTexture;

        /// <summary>
        /// Offset used to spawn preview objects, so they are outside of the active scene view when rendered
        /// <para></para>
        /// This is used because cameras don't work properly in preview scenes. 
        /// The best workaround found was to move the preview objects into the active scene, render the camera and move them back into the preview scene.
        /// <para></para>
        /// Thanks Unity!
        /// </summary>
        private static Vector3 _previewObjectsPositionOffset = new(100000, 100000, 0);

        /// <summary>
        /// Loads the preview scene with a specific tile.
        /// <para></para>
        /// The preview scene and objects will be initialized if not already.
        /// </summary>
        /// <param name="tile"></param>
        public static void LoadPreviewScene(DualGridRuleTile tile)
        {
            if (_previewScene == default)
            {
                _previewScene = EditorSceneManager.NewPreviewScene();
            }

            if (_previewDualGridTilemapModule == null)
            {
                _previewDualGridTilemapModule = CreateDualGridTilemapModule(tile);
                EditorSceneManager.MoveGameObjectToScene(_previewDualGridTilemapModule.transform.parent.gameObject, _previewScene);
            }

            if (_previewDualGridTilemapModule.RenderTile != tile)
            {
                UpdateDualGridTile(_previewDualGridTilemapModule, tile);
            }

            if (_previewCamera == null)
            {
                _previewCamera = CreateCamera();
                EditorSceneManager.MoveGameObjectToScene(_previewCamera.gameObject, _previewScene);
            }

            if (_renderTexture == null)
            {
                _renderTexture = new RenderTexture(1350, 420, 16, RenderTextureFormat.Default);
            }
        }

        /// <summary>
        /// Forcefully renders the preview dual grid tilemap, by temporarily moving the preview objects (camera and tilemap) into the active scene,
        /// so that they are rendered, and then back into the preview scene, so that they are hidden.
        /// <para></para>
        /// This is only done because temporary preview scenes don't allow cameras to work properly.
        /// </summary>
        public static void UpdateRenderTexture()
        {
            MovePreviewObjectsToScene(EditorSceneManager.GetActiveScene());

            _previewCamera.targetTexture = _renderTexture;
            _previewCamera.Render();
            _previewCamera.targetTexture = null;

            MovePreviewObjectsToScene(_previewScene);

            static void MovePreviewObjectsToScene(Scene scene)
            {
                EditorSceneManager.MoveGameObjectToScene(_previewDualGridTilemapModule.transform.parent.gameObject, scene);
                EditorSceneManager.MoveGameObjectToScene(_previewCamera.gameObject, scene);
            }
        }

        /// <summary>
        /// Returns the current tilemap preview render texture.
        /// </summary>
        /// <returns></returns>
        public static RenderTexture GetRenderTexture()
        {
            if (_renderTexture == null)
                Debug.LogError("RenderTexture not initialized. Make sure the preview scene is loaded.");

            return _renderTexture;
        }

        private static DualGridTilemapModule CreateDualGridTilemapModule(DualGridRuleTile dualGridRuleTile)
        {
            var dualGridTilemapModule = DualGridTilemapModuleEditor.CreateNewDualGridTilemap();

            dualGridTilemapModule.transform.parent.position += _previewObjectsPositionOffset;
            UpdateDualGridTile(dualGridTilemapModule, dualGridRuleTile);
            PaintSampleTiles(dualGridTilemapModule);

            return dualGridTilemapModule;
        }

        private static Camera CreateCamera()
        {
            var cameraObject = new GameObject("PreviewCamera");

            Camera camera = cameraObject.AddComponent<Camera>();

            camera.orthographic = true;
            camera.transform.position = new Vector3(0, -5.5f, -10) + _previewObjectsPositionOffset;
            camera.orthographicSize = 3;
            camera.nearClipPlane = 0.3f;
            camera.farClipPlane = 15f;
            camera.backgroundColor = Color.gray;
            camera.cullingMask = -1;

            return camera;
        }

        private static void PaintSampleTiles(DualGridTilemapModule previewDualGridTilemapModule)
        {
            var tile = ScriptableObject.CreateInstance<Tile>();

            previewDualGridTilemapModule.DataTilemap.ClearAllTiles();

            // Two dots
            SetTile(-9, -4);
            SetTile(-7, -4);

            // O shape
            SetTile(-9, -6);
            SetTile(-9, -7);
            SetTile(-9, -8);
            SetTile(-8, -6);
            SetTile(-8, -8);
            SetTile(-7, -6);
            SetTile(-7, -7);
            SetTile(-7, -8);

            // Horizontal line
            SetTile(-5, -4);
            SetTile(-4, -4);
            SetTile(-3, -4);

            // 3x3 square
            SetTile(-5, -6);
            SetTile(-4, -6);
            SetTile(-3, -6);
            SetTile(-5, -7);
            SetTile(-4, -7);
            SetTile(-3, -7);
            SetTile(-5, -8);
            SetTile(-4, -8);
            SetTile(-3, -8);

            // Exclamation Point
            SetTile(-1, -4);
            SetTile(-1, -5);
            SetTile(-1, -6);
            SetTile(-1, -8);

            // Plus Symbol
            SetTile(2, -4);
            SetTile(1, -5);
            SetTile(2, -5);
            SetTile(3, -5);
            SetTile(2, -6);

            // Another horizontal line
            SetTile(1, -8);
            SetTile(2, -8);
            SetTile(3, -8);

            // Top Shuriken thing
            SetTile(5, -4);
            SetTile(5, -5);
            SetTile(6, -5);
            SetTile(7, -4);
            SetTile(8, -4);
            SetTile(8, -5);

            // Bottom Shuriken thing
            SetTile(5, -7);
            SetTile(5, -8);
            SetTile(6, -7);
            SetTile(8, -7);
            SetTile(7, -8);
            SetTile(8, -8);

            void SetTile(int x, int y)
            {
                previewDualGridTilemapModule.DataTilemap.SetTile(new Vector3Int(x, y, 0), tile);
            }
        }

        private static void UpdateDualGridTile(DualGridTilemapModule dualGridTilemapModule, DualGridRuleTile dualGridRuleTile)
        {
            dualGridTilemapModule.RenderTile = dualGridRuleTile;
            dualGridTilemapModule.RefreshRenderTilemap();
        }

    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Editor\DualGridTilemapPersistentListener.cs
////////////////////////////////////////////////////////////////////////////////
﻿using UnityEditor;
using UnityEngine;
using UnityEngine.Tilemaps;

namespace skner.DualGrid.Editor
{
    [InitializeOnLoad]
    public static class DualGridTilemapPersistentListener
    {
        static DualGridTilemapPersistentListener()
        {
            Tilemap.tilemapTileChanged += HandleTilemapChange;
        }

        private static void HandleTilemapChange(Tilemap tilemap, Tilemap.SyncTile[] tiles)
        {
            var dualGridModules = Object.FindObjectsByType<DualGridTilemapModule>(FindObjectsSortMode.None);
            foreach (var module in dualGridModules)
            {
                module.HandleTilemapChange(tilemap, tiles);
            }
        }
    }
}





////////////////////////////////////////////////////////////////////////////////
// FILE: Packages\com.skner.dualgrid\Editor\Editors\DualGridBrushEditor.cs
////////////////////////////////////////////////////////////////////////////////
﻿using skner.DualGrid.Editor.Extensions;
using skner.DualGrid.Extensions;
using System;
using UnityEditor;
using UnityEditor.Tilemaps;
using UnityEngine;

namespace skner.DualGrid.Editor
{

    /// <summary>
    /// The custom editor for <see cref="DualGridBrush"/>.
    /// </summary>
    /// <remarks>
    /// This editor is completely compatible with the default <see cref="GridBrush"/>, but with added functionality for Dual Grid Tilemaps.
    /// <para></para>
    /// It's responsible for preview tiles and Undo operations.
    /// </remarks>
    [CustomEditor(typeof(DualGridBrush), false)]
    public class DualGridBrushEditor : GridBrushEditor
    {

        private DualGridTilemapModule _lastDualGridTilemapModule;

        private DualGridPreviewTile _previewTile;
        private DualGridPreviewTile _emptyPreviewTile;

        private BoundsInt? _lastBounds;
        private GridBrushBase.Tool? _lastTool;

        /// <summary>
        /// Whether a preview is shown while painting a Tilemap in the Flood Fill Tool.
        /// </summary>
        /// <remarks>
        /// Editor Preference taken from Grid Brush Preferences.
        /// </remarks>
        private static bool ShowFloodFillPreview => EditorPrefs.GetBool("GridBrush.EnableFloodFillPreview", true);

        public override void OnToolActivated(GridBrushBase.Tool tool)
        {
            if (_previewTile == null)
                _previewTile = DualGridPreviewTile.Filled;

            if (_emptyPreviewTile == null)
                _emptyPreviewTile = DualGridPreviewTile.NotFilled;

            ProtectAgainstEditingRenderTilemap();

            base.OnToolActivated(tool);
        }

        /// <summary>
        /// Controls whether this brush should actively prevent any direct changes to the a Render Tilemap.
        /// </summary>
        protected virtual void ProtectAgainstEditingRenderTilemap()
        {
            var currentSelection = Selection.activeObject as GameObject;
            if (currentSelection == null) return;

            var dualGridTilemapModuleFromRenderTilemap = currentSelection.GetComponentInImmediateParent<DualGridTilemapModule>();
            bool isPaintingOnRenderTilemap = dualGridTilemapModuleFromRenderTilemap != null;
            if (isPaintingOnRenderTilemap)
            {
                Debug.LogWarning($"Current selection {currentSelection.name} is a Render Tilemap and painting on it is not permitted. Changed to associated Data Tilemap {dualGridTilemapModuleFromRenderTilemap.DataTilemap.name}.");
                Selection.activeObject = dualGridTilemapModuleFromRenderTilemap.DataTilemap.gameObject;
            }
        }

        public override void OnPaintSceneGUI(GridLayout gridLayout, GameObject brushTarget, BoundsInt bounds, GridBrushBase.Tool tool, bool executing)
        {
            _lastDualGridTilemapModule = brushTarget.GetComponent<DualGridTilemapModule>();

            base.OnPaintSceneGUI(gridLayout, brushTarget, bounds, tool, executing);
        }

        public override void PaintPreview(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                BoundsInt bounds = GetBrushBounds(position);
                DualGridPaintPreview(dualGridTilemapModule, bounds);
            }
            else
            {
                base.PaintPreview(gridLayout, brushTarget, position);
            }
        }

        protected virtual void DualGridPaintPreview(DualGridTilemapModule dualGridTilemapModule, BoundsInt bounds)
        {
            foreach (var position in bounds.allPositionsWithin)
            {
                dualGridTilemapModule.SetEditorPreviewTile(position, _previewTile);
            }

            _lastBounds = bounds;
            _lastTool = GridBrushBase.Tool.Paint;
        }

#if UNITY_2023_1_OR_NEWER
        public override void ErasePreview(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                BoundsInt bounds = GetBrushBounds(position);
                DualGridErasePreview(dualGridTilemapModule, bounds);
            }
            else
            {
                base.ErasePreview(gridLayout, brushTarget, position);
            }
        }

        private void DualGridErasePreview(DualGridTilemapModule dualGridTilemapModule, BoundsInt bounds)
        {
            foreach (var position in bounds.allPositionsWithin)
            {
                dualGridTilemapModule.SetEditorPreviewTile(position, _emptyPreviewTile);
            }

            _lastBounds = bounds;
            _lastTool = GridBrushBase.Tool.Erase;
        }
#endif

        public override void BoxFillPreview(GridLayout gridLayout, GameObject brushTarget, BoundsInt bounds)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                DualGridBoxFillPreview(dualGridTilemapModule, bounds);
            }
            else
            {
                base.BoxFillPreview(gridLayout, brushTarget, bounds);
            }
        }

        protected virtual void DualGridBoxFillPreview(DualGridTilemapModule dualGridTilemapModule, BoundsInt bounds)
        {
            foreach (var position in bounds.allPositionsWithin)
            {
                dualGridTilemapModule.SetEditorPreviewTile(position, _previewTile);
            }

            _lastBounds = bounds;
            _lastTool = GridBrushBase.Tool.Box;
        }

        public override void FloodFillPreview(GridLayout gridLayout, GameObject brushTarget, Vector3Int position)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                DualGridFloodFillPreview(dualGridTilemapModule, position);
            }
            else
            {
                base.FloodFillPreview(gridLayout, brushTarget, position);
            }
        }

        protected virtual void DualGridFloodFillPreview(DualGridTilemapModule dualGridTilemapModule, Vector3Int position)
        {
            if (!ShowFloodFillPreview) return;

            // Applies flood fill to Dual Grid Tilemap
            dualGridTilemapModule.DataTilemap.EditorPreviewFloodFill(position, _previewTile);
            dualGridTilemapModule.UpdateAllPreviewRenderTiles();

            // Set floodfill bounds as tilemap bounds
            var bounds = new BoundsInt(position, Vector3Int.one);
            var origin = dualGridTilemapModule.DataTilemap.origin;
            bounds.min = origin;
            bounds.max = origin + dualGridTilemapModule.DataTilemap.size;

            _lastBounds = bounds;
            _lastTool = GridBrushBase.Tool.FloodFill;
        }

        public override void ClearPreview()
        {
            if (_lastDualGridTilemapModule != null)
            {
                DualGridClearPreview();
            }
            else
            {
                base.ClearPreview();
            }
        }

        protected virtual void DualGridClearPreview()
        {
            if (_lastBounds == null || _lastTool == null)
                return;

            switch (_lastTool)
            {
                case GridBrushBase.Tool.FloodFill:
                    {
                        _lastDualGridTilemapModule.ClearAllPreviewTiles();
                        break;
                    }
                case GridBrushBase.Tool.Box:
                    {
                        Vector3Int min = _lastBounds.Value.position;
                        Vector3Int max = min + _lastBounds.Value.size;
                        var bounds = new BoundsInt(min, max - min);
                        ClearEditorPreviewTiles(_lastDualGridTilemapModule, bounds);
                        break;
                    }
                case GridBrushBase.Tool.Erase:
                case GridBrushBase.Tool.Paint:
                    {
                        ClearEditorPreviewTiles(_lastDualGridTilemapModule, _lastBounds.Value);
                        break;
                    }
            }

            _lastBounds = null;
            _lastTool = null;
        }

        public override void RegisterUndo(GameObject brushTarget, GridBrushBase.Tool tool)
        {
            if (brushTarget.TryGetComponent(out DualGridTilemapModule dualGridTilemapModule))
            {
                // Clears any preview tiles, so they don't interfer with the Undo register call
                if (_lastBounds.HasValue) ClearEditorPreviewTiles(dualGridTilemapModule, _lastBounds.Value);

                Undo.RegisterCompleteObjectUndo(new UnityEngine.Object[] { dualGridTilemapModule.DataTilemap, dualGridTilemapModule.RenderTilemap }, $"{GetVerb(tool)} dual grid {dualGridTilemapModule.name}");
            }
            else
            {
                base.RegisterUndo(brushTarget, tool);
            }

            static string GetVerb(GridBrushBase.Tool tool)
            {
                string toolName = tool.ToString();

                if (toolName.EndsWith("e", StringComparison.OrdinalIgnoreCase))
                    toolName = toolName.Substring(0, toolName.Length - 1);

                return toolName + "ing";
            }
        }

        private BoundsInt GetBrushBounds(Vector3Int position)
        {
            var min = position - brush.pivot;
            var max = min + brush.size;
            return new BoundsInt(min, max - min);
        }

        private static void ClearEditorPreviewTiles(DualGridTilemapModule dualGridTilemapModule, BoundsInt bounds)
        {
            foreach (Vector3Int location in bounds.allPositionsWithin)
            {
                dualGridTilemapModule.ClearEditorPreviewTile(location);
            }
        }

    }
}






--------------------------------------------------------------------------------
This is part 1 out of 4 of script collection. 3 more parts remain.
--------------------------------------------------------------------------------