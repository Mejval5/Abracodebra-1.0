This document contains extracted Unity C# scripts from my project. Do not reply—just confirm storing this in memory. If the full script collection exceeds the character limit, additional parts will follow. Use this to update your understanding of the project until further updates.

================================================================================
UNITY PROJECT SCRIPT EXPORT - 2025-03-19 21:11:29
PART 3 OF 8
================================================================================

--------------------------------------------------------------------------------
Assets
├── DefaultVolumeProfile.asset
├── Editor
│   ├── NodeDefinitionAutoAdder.cs
│   ├── NodeDefinitionCreator.cs
│   ├── NodeDefinitionLibraryEditor.cs
│   ├── NodeDefinitionPostprocessor.cs
│   ├── NodeEffectDataDrawer.cs
│   └── WizardControllerStatusEditor.cs
├── InputSystem_Actions.inputactions
├── Materials
│   └── BezierCurveAA_Material.mat
├── Post Processing
│   └── BezierCurvesAntialiasing.renderTexture
├── Prefabs
│   ├── General
│   │   ├── Projectile_Basic_Pixel.prefab
│   │   └── WizardPrefab.prefab
│   ├── Node Presets
│   │   ├── NodeDefinitionLibrary.asset
│   │   ├── Node_001_AimSpread.asset
│   │   ├── Node_002_Piercing.asset
│   │   ├── Node_003_Output.asset
│   │   ├── Node_004_ManaSource.asset
│   │   ├── Node_005_DamageNode.asset
│   │   ├── Node_006_Burn.asset
│   │   └── Node_007_FriendlyFire.asset
│   ├── UI
│   │   ├── NodeConnectionView.prefab
│   │   └── NodeView.prefab
│   └── Wizard Presets
│       ├── Wizard_Basic.asset
│       └── Wizard_Dummy.asset
├── Scenes
│   ├── MainScene.unity
│   └── SampleScene.unity
├── Scripts
│   ├── Battle
│   │   ├── SpellProjectile.cs
│   │   └── Status Effects
│   │       ├── BurningStatusEffect.cs
│   │       └── StatusEffect.cs
│   ├── Core
│   ├── Nodes
│   │   ├── Core
│   │   │   ├── NodeData.cs
│   │   │   ├── NodeDefinition.cs
│   │   │   ├── NodeDefinitionLibrary.cs
│   │   │   ├── NodeEffectData.cs
│   │   │   ├── NodeEffectType.cs
│   │   │   ├── NodePort.cs
│   │   │   ├── OutputNodeEffect.cs
│   │   │   └── PortDefinition.cs
│   │   ├── Runtime
│   │   │   ├── NodeExecutor.cs
│   │   │   └── NodeGraph.cs
│   │   └── UI
│   │       ├── ColorExtensions.cs
│   │       ├── NodeConnectionView.cs
│   │       ├── NodeDraggable.cs
│   │       ├── NodeEditorController.cs
│   │       ├── NodeSelectable.cs
│   │       ├── NodeTestInitializer.cs
│   │       ├── NodeView.cs
│   │       ├── PinView.cs
│   │       └── UICubicBezier.cs
│   ├── UI
│   └── Wizards
│       ├── WizardController.cs
│       └── WizardPreset.cs
├── Settings
│   ├── Lit2DSceneTemplate.scenetemplate
│   ├── Renderer2D.asset
│   ├── Scenes
│   │   └── URP2DSceneTemplate.unity
│   └── UniversalRP.asset
├── Shaders
│   └── BezierCurveAA.shader
├── Sprites
│   ├── Clouds
│   │   ├── Clouds 1
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   └── 4.png
│   │   ├── Clouds 2
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   └── 4.png
│   │   ├── Clouds 3
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   └── 4.png
│   │   ├── Clouds 4
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   └── 4.png
│   │   ├── Clouds 5
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   ├── 4.png
│   │   │   └── 5.png
│   │   ├── Clouds 6
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   ├── 4.png
│   │   │   ├── 5.png
│   │   │   └── 6.png
│   │   ├── Clouds 7
│   │   │   ├── 1.png
│   │   │   ├── 2.png
│   │   │   ├── 3.png
│   │   │   └── 4.png
│   │   └── Clouds 8
│   │       ├── 1.png
│   │       ├── 2.png
│   │       ├── 3.png
│   │       ├── 4.png
│   │       ├── 5.png
│   │       └── 6.png
│   ├── Free Pixel Effects Pack
│   │   ├── 10_weaponhit_spritesheet.png
│   │   ├── 11_fire_spritesheet.png
│   │   ├── 12_nebula_spritesheet.png
│   │   ├── 13_vortex_spritesheet.png
│   │   ├── 14_phantom_spritesheet.png
│   │   ├── 15_loading_spritesheet.png
│   │   ├── 16_sunburn_spritesheet.png
│   │   ├── 17_felspell_spritesheet.png
│   │   ├── 18_midnight_spritesheet.png
│   │   ├── 19_freezing_spritesheet.png
│   │   ├── 1_magicspell_spritesheet.png
│   │   ├── 20_magicbubbles_spritesheet.png
│   │   ├── 2_magic8_spritesheet.png
│   │   ├── 3_bluefire_spritesheet.png
│   │   ├── 4_casting_spritesheet.png
│   │   ├── 5_magickahit_spritesheet.png
│   │   ├── 6_flamelash_spritesheet.png
│   │   ├── 7_firespin_spritesheet.png
│   │   ├── 8_protectioncircle_spritesheet.png
│   │   ├── 9_brightfire_spritesheet.png
│   │   ├── README.txt
│   │   └── cover.png
│   ├── MR-Platformer-v1
│   │   ├── Backgrounds
│   │   │   ├── merged-full-background.png
│   │   │   ├── parallax-background-mountains.png
│   │   │   ├── parallax-background-sky.png
│   │   │   ├── parallax-forest-trees-01.png
│   │   │   └── parallax-forest-trees-02.png
│   │   ├── Enemies
│   │   │   ├── Enemy-Bat-Fly-32x32.png
│   │   │   ├── Enemy-Boss-Golem-Idle-48x48.png
│   │   │   ├── Enemy-Dark-Guard-Idle-39x49.png
│   │   │   ├── Enemy-Forest-Goblin-Hog-Idle-32x32.png
│   │   │   ├── Enemy-Forest-Goblin-Idle-32x32.png
│   │   │   ├── Enemy-Frog-Attack-24x24.png
│   │   │   ├── Enemy-Frog-Idle-24x24.png
│   │   │   ├── Enemy-Frog-Tongue-Attack-72x24.png
│   │   │   ├── Enemy-Mushroom-Walk-24x24.png
│   │   │   ├── Enemy-Necromancer-Idle-32x32.png
│   │   │   ├── Enemy-Plant-Mutant-Idle-Attack-46x32.png
│   │   │   ├── Enemy-Skull-Slime-Idle-32x24.png
│   │   │   ├── Enemy-Snail-Attack-24x24.png
│   │   │   └── Enemy-Snail-Walk-24x24.png
│   │   ├── Misc
│   │   │   ├── Bridge-Support.png
│   │   │   ├── Bridge-handle-01.png
│   │   │   ├── Bridge-handle-02.png
│   │   │   ├── Bridge.png
│   │   │   ├── Bush-Background.png
│   │   │   ├── Bush-Green-Foreground.png
│   │   │   ├── Bush-Purple-Foreground.png
│   │   │   ├── Cave-Background-Hole-01.png
│   │   │   ├── Cave-Background-Rocks-01.png
│   │   │   ├── Cave-Background-Rocks-02.png
│   │   │   ├── Cave-Background.png
│   │   │   ├── Cave-Entrance.png
│   │   │   ├── Grass-Green-Foreground.png
│   │   │   ├── Grass-Purple-Foreground.png
│   │   │   ├── House-01.png
│   │   │   ├── House-02.png
│   │   │   ├── House-Background-01.png
│   │   │   ├── House-Background-02
│   │   │   ├── Lamp-Off.png
│   │   │   ├── Lamp-On.png
│   │   │   └── Mushrooms.png
│   │   ├── NPC
│   │   │   ├── NPC-Alchemist-Idle-24x24.png
│   │   │   ├── NPC-Blacksmith-Idle-48x48.png
│   │   │   ├── NPC-Builder-01-Working-24x24.png
│   │   │   ├── NPC-Builder-02-Working-24x24.png
│   │   │   ├── NPC-Chick-Idle-16x16.png
│   │   │   ├── NPC-Miner-Idle-24x24.png
│   │   │   ├── NPC-Old-Shaman-Idle-24x24.png
│   │   │   ├── NPC-Puppy-Idle-24x24.png
│   │   │   ├── NPC-Village-Guard-Idle-32x32.png
│   │   │   ├── NPC-Village-Lady-01-Talk-24x24.png
│   │   │   └── NPC-Village-Lady-02-Idle-24x24.png
│   │   ├── Objects
│   │   │   ├── Obj-Arrow-Idle-12x12.png
│   │   │   ├── Obj-Arrow-Stuck-12x12.png
│   │   │   ├── Obj-Axe-Wood.png
│   │   │   ├── Obj-Barrel.png
│   │   │   ├── Obj-Big-Wood-Platform-01.png
│   │   │   ├── Obj-Big-Wood-Platform-02.png
│   │   │   ├── Obj-Blue-Mineral.png
│   │   │   ├── Obj-Boxes.png
│   │   │   ├── Obj-Cage.png
│   │   │   ├── Obj-Checkpoint-Off.png
│   │   │   ├── Obj-Checkpoint-On.png
│   │   │   ├── Obj-Chest-Closed-24x24.png
│   │   │   ├── Obj-Chest-Opening-24x24.png
│   │   │   ├── Obj-Crystal-Idle-32x32.png
│   │   │   ├── Obj-Crystal-Open-32x32.png
│   │   │   ├── Obj-Dreamcatcher-01.png
│   │   │   ├── Obj-Dreamcatcher-02.png
│   │   │   ├── Obj-Dreamcatcher-03.png
│   │   │   ├── Obj-Fence.png
│   │   │   ├── Obj-Flag-Hanging-01.png
│   │   │   ├── Obj-Gate-Hold.png
│   │   │   ├── Obj-Gate-Pillar.png
│   │   │   ├── Obj-Green-Mineral.png
│   │   │   ├── Obj-Hanging-Flag-01.png
│   │   │   ├── Obj-Hanging-Flag-02.png
│   │   │   ├── Obj-Hanging-Flag-Medium.png
│   │   │   ├── Obj-Idol.png
│   │   │   ├── Obj-Key.png
│   │   │   ├── Obj-Lamp-On.png
│   │   │   ├── Obj-Light-01.png
│   │   │   ├── Obj-Mine-Carriage.png
│   │   │   ├── Obj-Moving-Platform-Idle-48x28.png
│   │   │   ├── Obj-Orange-Mineral.png
│   │   │   ├── Obj-Pickaxe.png
│   │   │   ├── Obj-Roof-Hanging.png
│   │   │   ├── Obj-Short-Roof.png
│   │   │   ├── Obj-Stairs.png
│   │   │   ├── Obj-Statue.png
│   │   │   ├── Obj-Village-Gate-Top.png
│   │   │   ├── Obj-Wood-Pillar-01.png
│   │   │   ├── Obj-Wood-Platform-01.png
│   │   │   ├── Obj-Wood-Platform-02.png
│   │   │   ├── Obj-Wood-Platform-Tall-02.png
│   │   │   ├── Obj-Wood-Platform-Tall.png
│   │   │   ├── Obj-Wood-Platform-Top.png
│   │   │   └── Obj-Wood.png
│   │   ├── Player
│   │   │   ├── Player-Attack-24x24.png
│   │   │   ├── Player-Fall-24x24.png
│   │   │   ├── Player-Idle-24x24.png
│   │   │   ├── Player-Jump-24x24.png
│   │   │   └── Player-Run-24x24.png
│   │   ├── Tiles
│   │   │   ├── Cave-Under-Tile.png
│   │   │   ├── Tile-01.png
│   │   │   ├── Tile-02.png
│   │   │   ├── Tile-03.png
│   │   │   ├── Tile-04.png
│   │   │   ├── Tile-05.png
│   │   │   ├── Tile-06.png
│   │   │   ├── Tile-07.png
│   │   │   ├── Tile-08.png
│   │   │   ├── Tile-09.png
│   │   │   ├── Tile-10.png
│   │   │   ├── Tile-11.png
│   │   │   ├── Tile-12.png
│   │   │   ├── Tile-13.png
│   │   │   ├── Tile-14.png
│   │   │   ├── Tile-15.png
│   │   │   ├── Tile-16.png
│   │   │   ├── Tile-17.png
│   │   │   ├── Tile-18.png
│   │   │   ├── Tile-19.png
│   │   │   ├── Tile-20.png
│   │   │   ├── Tile-21.png
│   │   │   ├── Tile-22.png
│   │   │   ├── Tile-23.png
│   │   │   ├── Tile-24.png
│   │   │   ├── Tile-25.png
│   │   │   ├── Tile-26.png
│   │   │   ├── Tile-27.png
│   │   │   ├── Tile-28.png
│   │   │   ├── Tile-29.png
│   │   │   ├── Tile-30.png
│   │   │   ├── Tile-31.png
│   │   │   ├── Tile-32.png
│   │   │   ├── Tile-33.png
│   │   │   ├── Tile-34.png
│   │   │   ├── Tile-35.png
│   │   │   ├── Tile-36.png
│   │   │   ├── Tile-37.png
│   │   │   ├── Tree-Trunk-01.png
│   │   │   └── Tree-Trunk-02.png
│   │   └── UI
│   │       ├── Quest-Mark-Idle-16x16.png
│   │       ├── UI-Boss-Icon.png
│   │       ├── UI-Lives.png
│   │       ├── UI-Menu-Button-Active.png
│   │       ├── UI-Menu-Button-Default.png
│   │       └── UI-Menu-Popup-Background.png
│   ├── PixelWhite.png
│   ├── Shikashi's Fantasy Icons Pack v2
│   │   ├── #1 - Transparent Icons.png
│   │   ├── #2 - Transparent Icons & Drop Shadow.png
│   │   ├── BG 10.png
│   │   ├── BG 11.png
│   │   ├── BG 3a.png
│   │   ├── BG 3b.png
│   │   ├── BG 3c.png
│   │   ├── BG 4a.png
│   │   ├── BG 4b.png
│   │   ├── BG 5.png
│   │   ├── BG 6.png
│   │   ├── BG 7.png
│   │   ├── BG 8.png
│   │   ├── BG 9.png
│   │   ├── Background 1a.png
│   │   ├── Background 1b.png
│   │   ├── Background 2.png
│   │   └── Shikashi's Fantasy Icons Pack.txt
│   ├── Tiny RPG Character Asset Pack v1.03 -Free Soldier&Orc
│   │   ├── Arrow(Projectile)
│   │   │   ├── Arrow01(100x100).png
│   │   │   └── Arrow01(32x32).png
│   │   ├── Aseprite file
│   │   │   ├── Orc.aseprite
│   │   │   └── Soldier.aseprite
│   │   └── Characters(100x100)
│   │       ├── Orc
│   │       │   ├── Orc
│   │       │   │   ├── Orc-Attack01.png
│   │       │   │   ├── Orc-Attack02.png
│   │       │   │   ├── Orc-Death.png
│   │       │   │   ├── Orc-Hurt.png
│   │       │   │   ├── Orc-Idle-Anim.anim
│   │       │   │   ├── Orc-Idle.png
│   │       │   │   ├── Orc-Idle_0.controller
│   │       │   │   ├── Orc-Walk.png
│   │       │   │   ├── Orc.png
│   │       │   │   └── Shadow sprites
│   │       │   │       ├── Orc-shadow.png
│   │       │   │       ├── Orc-shadow_attack02.png
│   │       │   │       └── Orc-shadow_death.png
│   │       │   ├── Orc with shadows
│   │       │   │   ├── Orc-Attack01.png
│   │       │   │   ├── Orc-Attack02.png
│   │       │   │   ├── Orc-Death.png
│   │       │   │   ├── Orc-Hurt.png
│   │       │   │   ├── Orc-Idle.png
│   │       │   │   ├── Orc-Walk.png
│   │       │   │   └── Orc.png
│   │       │   └── Orc(Split Effects)
│   │       │       ├── Orc-attack01_Effect.png
│   │       │       ├── Orc-attack02_Effect.png
│   │       │       └── Orc.png
│   │       └── Soldier
│   │           ├── Arrow(projectile)
│   │           │   ├── Arrow01(100x100).png
│   │           │   └── Arrow01(32x32).png
│   │           ├── Soldier
│   │           │   ├── Shadow sprites
│   │           │   │   ├── Soldier-Shadow.png
│   │           │   │   └── Soldier-Shadow_death.png
│   │           │   ├── Soldier-Attack01.png
│   │           │   ├── Soldier-Attack02.png
│   │           │   ├── Soldier-Attack03.png
│   │           │   ├── Soldier-Death.png
│   │           │   ├── Soldier-Hurt.png
│   │           │   ├── Soldier-Idle.png
│   │           │   ├── Soldier-Shadow_attack2.png
│   │           │   ├── Soldier-Walk.png
│   │           │   └── Soldier.png
│   │           ├── Soldier with shadows
│   │           │   ├── Soldier-Attack01.png
│   │           │   ├── Soldier-Attack02.png
│   │           │   ├── Soldier-Attack03.png
│   │           │   ├── Soldier-Death.png
│   │           │   ├── Soldier-Hurt.png
│   │           │   ├── Soldier-Idle-Anim.anim
│   │           │   ├── Soldier-Idle.png
│   │           │   ├── Soldier-Idle_0.controller
│   │           │   ├── Soldier-Walk.png
│   │           │   ├── Soldier.png
│   │           │   └── WizardPrefab.controller
│   │           └── Soldier(Split Effects)
│   │               ├── Soldier-Attack01_Effect.png
│   │               ├── Soldier-Attack02_Effect.png
│   │               ├── Soldier-Attack03_Effect.png
│   │               └── Soldier.png
│   └── Wizard Pack
│       ├── Attack1.png
│       ├── Attack2.png
│       ├── Death.png
│       ├── Fall.png
│       ├── Hit.png
│       ├── Idle.png
│       ├── Jump.png
│       └── Run.png
├── Test
├── TextMesh Pro
│   ├── Examples & Extras
│   │   ├── Fonts
│   │   │   ├── Anton OFL.txt
│   │   │   ├── Anton.ttf
│   │   │   ├── Bangers - OFL.txt
│   │   │   ├── Bangers.ttf
│   │   │   ├── Electronic Highway Sign.TTF
│   │   │   ├── Oswald-Bold - OFL.txt
│   │   │   ├── Oswald-Bold.ttf
│   │   │   ├── Roboto-Bold - AFL.txt
│   │   │   ├── Roboto-Bold - License.txt
│   │   │   ├── Roboto-Bold.ttf
│   │   │   ├── Unity - OFL.txt
│   │   │   └── Unity.ttf
│   │   ├── Materials
│   │   │   ├── Crate - Surface Shader Scene.mat
│   │   │   ├── Crate - URP.mat
│   │   │   ├── Ground - Logo Scene.mat
│   │   │   ├── Ground - Surface Shader Scene.mat
│   │   │   ├── Ground - URP.mat
│   │   │   └── Small Crate_diffuse.mat
│   │   ├── Prefabs
│   │   │   ├── Text Popup.prefab
│   │   │   ├── TextMeshPro - Prefab 1.prefab
│   │   │   └── TextMeshPro - Prefab 2.prefab
│   │   ├── Resources
│   │   │   ├── Color Gradient Presets
│   │   │   │   ├── Blue to Purple - Vertical.asset
│   │   │   │   ├── Dark to Light Green - Vertical.asset
│   │   │   │   ├── Light to Dark Green - Vertical.asset
│   │   │   │   └── Yellow to Orange - Vertical.asset
│   │   │   ├── Fonts & Materials
│   │   │   │   ├── Anton SDF - Drop Shadow.mat
│   │   │   │   ├── Anton SDF - Outline.mat
│   │   │   │   ├── Anton SDF - Sunny Days.mat
│   │   │   │   ├── Anton SDF.asset
│   │   │   │   ├── Bangers SDF - Drop Shadow - 2 Pass.mat
│   │   │   │   ├── Bangers SDF - Drop Shadow.mat
│   │   │   │   ├── Bangers SDF - Outline.mat
│   │   │   │   ├── Bangers SDF Glow.mat
│   │   │   │   ├── Bangers SDF Logo - URP.mat
│   │   │   │   ├── Bangers SDF Logo.mat
│   │   │   │   ├── Bangers SDF.asset
│   │   │   │   ├── Electronic Highway Sign SDF.asset
│   │   │   │   ├── LiberationSans SDF - Metalic Green.mat
│   │   │   │   ├── LiberationSans SDF - Overlay.mat
│   │   │   │   ├── LiberationSans SDF - Soft Mask.mat
│   │   │   │   ├── Oswald Bold SDF.asset
│   │   │   │   ├── Roboto-Bold SDF - Drop Shadow.mat
│   │   │   │   ├── Roboto-Bold SDF - HDRP Unlit.mat
│   │   │   │   ├── Roboto-Bold SDF - Surface.mat
│   │   │   │   ├── Roboto-Bold SDF - URP.mat
│   │   │   │   ├── Roboto-Bold SDF.asset
│   │   │   │   ├── Unity SDF - HDRP LIT - Bloom.mat
│   │   │   │   ├── Unity SDF - HDRP LIT - Outline.mat
│   │   │   │   └── Unity SDF.asset
│   │   │   └── Sprite Assets
│   │   │       ├── Default Sprite Asset.asset
│   │   │       └── DropCap Numbers.asset
│   │   ├── Scenes
│   │   │   ├── 01-  Single Line TextMesh Pro.unity
│   │   │   ├── 02 - Multi-line TextMesh Pro.unity
│   │   │   ├── 03 - Line Justification.unity
│   │   │   ├── 04 - Word Wrapping.unity
│   │   │   ├── 05 - Style Tags.unity
│   │   │   ├── 06 - Extra Rich Text Examples.unity
│   │   │   ├── 07 - Superscript & Subscript Example.unity
│   │   │   ├── 08 - Improved Text Alignment.unity
│   │   │   ├── 09 - Margin Tag Example.unity
│   │   │   ├── 10 - Bullets & Numbered List Example.unity
│   │   │   ├── 11 - The Style Tag.unity
│   │   │   ├── 12 - Link Example.unity
│   │   │   ├── 12a - Text Interactions.unity
│   │   │   ├── 13 - Soft Hyphenation.unity
│   │   │   ├── 14 - Multi Font & Sprites.unity
│   │   │   ├── 15 - Inline Graphics & Sprites.unity
│   │   │   ├── 16 - Linked text overflow mode example.unity
│   │   │   ├── 17 - Old Computer Terminal.unity
│   │   │   ├── 18 - ScrollRect & Masking & Layout.unity
│   │   │   ├── 19 - Masking Texture & Soft Mask.unity
│   │   │   ├── 20 - Input Field with Scrollbar.unity
│   │   │   ├── 21 - Script Example.unity
│   │   │   ├── 22 - Basic Scripting Example.unity
│   │   │   ├── 23 - Animating Vertex Attributes.unity
│   │   │   ├── 24 - Surface Shader Example URP.unity
│   │   │   ├── 24 - Surface Shader Example.unity
│   │   │   ├── 25 - Sunny Days Example.unity
│   │   │   ├── 26 - Dropdown Placeholder Example.unity
│   │   │   ├── 27 - Double Pass Shader Example.unity
│   │   │   ├── 28 - HDRP Shader Example
│   │   │   │   └── Sky and Fog Volume Profile.asset
│   │   │   ├── 28 - HDRP Shader Example.unity
│   │   │   └── Benchmark (Floating Text).unity
│   │   ├── Scripts
│   │   │   ├── Benchmark01.cs
│   │   │   ├── Benchmark01_UGUI.cs
│   │   │   ├── Benchmark02.cs
│   │   │   ├── Benchmark03.cs
│   │   │   ├── Benchmark04.cs
│   │   │   ├── CameraController.cs
│   │   │   ├── ChatController.cs
│   │   │   ├── DropdownSample.cs
│   │   │   ├── EnvMapAnimator.cs
│   │   │   ├── ObjectSpin.cs
│   │   │   ├── ShaderPropAnimator.cs
│   │   │   ├── SimpleScript.cs
│   │   │   ├── SkewTextExample.cs
│   │   │   ├── TMP_DigitValidator.cs
│   │   │   ├── TMP_ExampleScript_01.cs
│   │   │   ├── TMP_FrameRateCounter.cs
│   │   │   ├── TMP_PhoneNumberValidator.cs
│   │   │   ├── TMP_TextEventCheck.cs
│   │   │   ├── TMP_TextEventHandler.cs
│   │   │   ├── TMP_TextInfoDebugTool.cs
│   │   │   ├── TMP_TextSelector_A.cs
│   │   │   ├── TMP_TextSelector_B.cs
│   │   │   ├── TMP_UiFrameRateCounter.cs
│   │   │   ├── TMPro_InstructionOverlay.cs
│   │   │   ├── TeleType.cs
│   │   │   ├── TextConsoleSimulator.cs
│   │   │   ├── TextMeshProFloatingText.cs
│   │   │   ├── TextMeshSpawner.cs
│   │   │   ├── VertexColorCycler.cs
│   │   │   ├── VertexJitter.cs
│   │   │   ├── VertexShakeA.cs
│   │   │   ├── VertexShakeB.cs
│   │   │   ├── VertexZoom.cs
│   │   │   └── WarpTextExample.cs
│   │   ├── Sprites
│   │   │   ├── Default Sprites.png
│   │   │   └── DropCap Numbers.psd
│   │   └── Textures
│   │       ├── Brushed Metal 3.jpg
│   │       ├── Floor Cement.jpg
│   │       ├── Floor Tiles 1 - diffuse.jpg
│   │       ├── Fruit Jelly (B&W).jpg
│   │       ├── Gradient Diagonal (Color).jpg
│   │       ├── Gradient Horizontal (Color).jpg
│   │       ├── Gradient Vertical (Color).jpg
│   │       ├── Mask Zig-n-Zag.psd
│   │       ├── Small Crate_diffuse.jpg
│   │       ├── Small Crate_normal.jpg
│   │       ├── Sunny Days - Seamless.jpg
│   │       ├── Text Overflow - Linked Text Image 1.png
│   │       ├── Text Overflow - Linked Text UI Screenshot.png
│   │       ├── Wipe Pattern - Circle.psd
│   │       ├── Wipe Pattern - Diagonal.psd
│   │       ├── Wipe Pattern - Radial Double.psd
│   │       └── Wipe Pattern - Radial Quad.psd
│   ├── Fonts
│   │   ├── LiberationSans - OFL.txt
│   │   └── LiberationSans.ttf
│   ├── Resources
│   │   ├── Fonts & Materials
│   │   │   ├── LiberationSans SDF - Drop Shadow.mat
│   │   │   ├── LiberationSans SDF - Fallback.asset
│   │   │   ├── LiberationSans SDF - Outline.mat
│   │   │   └── LiberationSans SDF.asset
│   │   ├── LineBreaking Following Characters.txt
│   │   ├── LineBreaking Leading Characters.txt
│   │   ├── Sprite Assets
│   │   │   └── EmojiOne.asset
│   │   ├── Style Sheets
│   │   │   └── Default Style Sheet.asset
│   │   └── TMP Settings.asset
│   ├── Shaders
│   │   ├── SDFFunctions.hlsl
│   │   ├── TMP_Bitmap-Custom-Atlas.shader
│   │   ├── TMP_Bitmap-Mobile.shader
│   │   ├── TMP_Bitmap.shader
│   │   ├── TMP_SDF Overlay.shader
│   │   ├── TMP_SDF SSD.shader
│   │   ├── TMP_SDF-HDRP LIT.shadergraph
│   │   ├── TMP_SDF-HDRP UNLIT.shadergraph
│   │   ├── TMP_SDF-Mobile Masking.shader
│   │   ├── TMP_SDF-Mobile Overlay.shader
│   │   ├── TMP_SDF-Mobile SSD.shader
│   │   ├── TMP_SDF-Mobile-2-Pass.shader
│   │   ├── TMP_SDF-Mobile.shader
│   │   ├── TMP_SDF-Surface-Mobile.shader
│   │   ├── TMP_SDF-Surface.shader
│   │   ├── TMP_SDF-URP Lit.shadergraph
│   │   ├── TMP_SDF-URP Unlit.shadergraph
│   │   ├── TMP_SDF.shader
│   │   ├── TMP_Sprite.shader
│   │   ├── TMPro.cginc
│   │   ├── TMPro_Mobile.cginc
│   │   ├── TMPro_Properties.cginc
│   │   └── TMPro_Surface.cginc
│   └── Sprites
│       ├── EmojiOne Attribution.txt
│       ├── EmojiOne.json
│       └── EmojiOne.png
└── UniversalRenderPipelineGlobalSettings.asset
--------------------------------------------------------------------------------

SCRIPT CONTENTS
================================================================================

SCRIPT CONTENTS
================================================================================

////////////////////////////////////////////////////////////////////////////////
// FILE: Assets\Scripts\Nodes\Runtime\NodeExecutor.cs
////////////////////////////////////////////////////////////////////////////////
﻿using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using TMPro;

public class NodeExecutor : MonoBehaviour
{
    [SerializeField] private NodeGraph currentGraph;

    [Header("Debug Settings")]
    public float waitTimeBetweenNodes = 0.5f;
    public TMP_Text debugOutput;

    private float totalDamage = 0f;
    private float totalManaCost = 0f;
    private List<string> skippedNodes = new List<string>();

    private void Update()
    {
        RechargeNodesOverTime();

        if (Input.GetKeyDown(KeyCode.Space))
            ExecuteGraph();
    }

    private void RechargeNodesOverTime()
    {
        if (currentGraph == null) return;

        foreach (var node in currentGraph.nodes)
        {
            var storage = node.effects.FirstOrDefault(e => e.effectType == NodeEffectType.ManaStorage);
            if (storage != null)
            {
                float cap = storage.effectValue;
                float cur = storage.secondaryValue;
                var rateEff = node.effects.FirstOrDefault(e => e.effectType == NodeEffectType.ManaRechargeRate);
                float rate = (rateEff != null) ? rateEff.effectValue : 0f;
                cur += rate * Time.deltaTime;
                if (cur > cap) cur = cap;
                storage.secondaryValue = cur;
            }
        }
    }

    public void SetGraph(NodeGraph graph)
    {
        currentGraph = graph;
    }

    public NodeGraph GetGraph() => currentGraph;

    public void ExecuteGraph()
    {
        if (currentGraph == null || currentGraph.nodes.Count == 0)
        {
            Debug.LogWarning("[NodeExecutor] No graph or no nodes to execute!");
            return;
        }

        totalDamage = 0f;
        totalManaCost = 0f;
        skippedNodes.Clear();

        StopAllCoroutines();
        StartCoroutine(RunChainCoroutine());
    }

    private IEnumerator RunChainCoroutine()
    {
        ClearDebugOutput();
        Dictionary<string, int> inboundCount = BuildInboundCount();
        List<NodeData> startNodes = currentGraph.nodes.Where(n => inboundCount[n.nodeId] == 0).ToList();
        if (startNodes.Count == 0)
        {
            LogDebug("[NodeExecutor] No start nodes found. Aborting run.");
            yield break;
        }

        Queue<NodeData> queue = new Queue<NodeData>();
        HashSet<string> visited = new HashSet<string>();
        foreach (var s in startNodes)
            queue.Enqueue(s);

        List<NodeData> chain = new List<NodeData>();
        while (queue.Count > 0)
        {
            NodeData curr = queue.Dequeue();
            if (visited.Contains(curr.nodeId))
                continue;
            visited.Add(curr.nodeId);
            chain.Add(curr);

            if (currentGraph.adjacency != null && currentGraph.adjacency.ContainsKey(curr.nodeId))
            {
                foreach (var childId in currentGraph.adjacency[curr.nodeId])
                {
                    inboundCount[childId]--;
                    if (inboundCount[childId] <= 0)
                    {
                        NodeData child = currentGraph.nodes.FirstOrDefault(n => n.nodeId == childId);
                        if (child != null)
                            queue.Enqueue(child);
                    }
                }
            }
        }

        string chainLog = string.Join(" -> ", chain.Select(n => n.nodeDisplayName));
        LogDebug("[NodeExecutor] Chain: " + chainLog);

        float accumulatedAimSpreadModifier = 0f;
        float accumulatedBurningDamage = 0f;
        float accumulatedBurningDuration = 0f;
        bool accumulatedPiercing = false;
        bool accumulatedFriendlyFire = false;

        foreach (var node in chain)
        {
            yield return new WaitForSeconds(waitTimeBetweenNodes);
            bool executed = false;
            float cost = node.effects.Where(e => e.effectType == NodeEffectType.ManaCost).Sum(e => e.effectValue);

            if (cost > 0f && (!currentGraph.manaConnections.ContainsKey(node.nodeId) ||
                              string.IsNullOrEmpty(currentGraph.manaConnections[node.nodeId])))
            {
                LogDebug($"[NodeExecutor] Skipping '{node.nodeDisplayName}' - no valid mana source connected.");
                skippedNodes.Add(node.nodeDisplayName);
                continue;
            }

            if (cost <= 0f)
            {
                float dmg = node.effects.Where(e => e.effectType == NodeEffectType.Damage).Sum(e => e.effectValue);
                totalDamage += dmg;
                executed = true;
                LogDebug($"[NodeExecutor] Executed '{node.nodeDisplayName}' with no cost, damage={Mathf.Floor(dmg)}");
            }
            else
            {
                string sourceId = currentGraph.manaConnections[node.nodeId];
                NodeData sourceNode = currentGraph.nodes.FirstOrDefault(n => n.nodeId == sourceId);
                if (sourceNode == null)
                {
                    LogDebug($"[NodeExecutor] Skipping '{node.nodeDisplayName}' - upstream mana node not found.");
                    skippedNodes.Add(node.nodeDisplayName);
                    continue;
                }

                var storageEff = sourceNode.effects.FirstOrDefault(e => e.effectType == NodeEffectType.ManaStorage);
                if (storageEff == null)
                {
                    LogDebug($"[NodeExecutor] Skipping '{node.nodeDisplayName}' - source node '{sourceNode.nodeDisplayName}' has no ManaStorage.");
                    skippedNodes.Add(node.nodeDisplayName);
                    continue;
                }

                float cap = storageEff.effectValue;
                float cur = storageEff.secondaryValue;

                if (cur < cost)
                {
                    LogDebug($"[NodeExecutor] Skipping '{node.nodeDisplayName}' (insufficient mana in '{sourceNode.nodeDisplayName}': {Mathf.Floor(cur)}/{cost}).");
                    skippedNodes.Add(node.nodeDisplayName);
                    continue;
                }
                else
                {
                    cur -= cost;
                    storageEff.secondaryValue = cur;
                    totalManaCost += cost;

                    float dmg = node.effects.Where(e => e.effectType == NodeEffectType.Damage).Sum(e => e.effectValue);
                    totalDamage += dmg;
                    executed = true;
                    LogDebug($"[NodeExecutor] '{node.nodeDisplayName}' executed: cost={Mathf.Floor(cost)}, damage={Mathf.Floor(dmg)}, source='{sourceNode.nodeDisplayName}', leftoverMana={Mathf.Floor(cur)}/{Mathf.Floor(cap)}");
                }
            }

            if (executed)
            {
                foreach (var eff in node.effects)
                {
                    if (eff.effectType == NodeEffectType.AimSpread)
                        accumulatedAimSpreadModifier += eff.effectValue;
                    else if (eff.effectType == NodeEffectType.Burning)
                    {
                        accumulatedBurningDamage += eff.effectValue;
                        accumulatedBurningDuration += eff.secondaryValue;
                    }
                    else if (eff.effectType == NodeEffectType.Piercing)
                        accumulatedPiercing = true;
                    else if (eff.effectType == NodeEffectType.FriendlyFire)
                        accumulatedFriendlyFire = true;
                }
            }

            bool isOutput = node.effects.Any(e => e.effectType == NodeEffectType.Output);
            if (isOutput)
            {
                LogDebug($"[NodeExecutor] Output node '{node.nodeDisplayName}' reached.");
                LogDebug($"[NodeExecutor] Total mana cost: {Mathf.Floor(totalManaCost)}");
                string skipStr = (skippedNodes.Count > 0) ? string.Join(", ", skippedNodes) : "None";
                LogDebug($"[NodeExecutor] Skipped nodes: {skipStr}");
                LogDebug($"[NodeExecutor] Final damage: {Mathf.Floor(totalDamage)}");

                NodeView outputView = FindNodeViewById(node.nodeId);
                if (outputView != null)
                {
                    OutputNodeEffect outputEffect = outputView.GetComponent<OutputNodeEffect>();
                    if (outputEffect != null)
                    {
                        outputEffect.Activate(totalDamage, accumulatedAimSpreadModifier, accumulatedBurningDamage, accumulatedBurningDuration, accumulatedPiercing, accumulatedFriendlyFire);
                    }
                    else
                    {
                        Debug.LogWarning("[NodeExecutor] Output node effect not found on NodeView.");
                    }
                }
            }
        }

        LogDebug("[NodeExecutor] BFS execution complete.");
    }

    private NodeView FindNodeViewById(string nodeId)
    {
        // Use FindObjectsByType
        NodeView[] views = Object.FindObjectsByType<NodeView>(FindObjectsSortMode.None);
        foreach (var view in views)
        {
            if (view.GetNodeData().nodeId == nodeId)
                return view;
        }
        return null;
    }

    private Dictionary<string, int> BuildInboundCount()
    {
        Dictionary<string, int> inboundCount = new Dictionary<string, int>();
        foreach (var node in currentGraph.nodes)
            inboundCount[node.nodeId] = 0;

        if (currentGraph.adjacency != null)
        {
            foreach (var kvp in currentGraph.adjacency)
            {
                foreach (var childId in kvp.Value)
                {
                    inboundCount[childId]++;
                }
            }
        }
        return inboundCount;
    }

    private void ClearDebugOutput()
    {
        if (debugOutput)
            debugOutput.text = "";
    }

    private void LogDebug(string msg)
    {
        Debug.Log(msg);
        if (debugOutput)
            debugOutput.text += msg + "\n";
    }
}






--------------------------------------------------------------------------------
This is part 3 out of 8 of script collection. 5 more parts remain.
--------------------------------------------------------------------------------